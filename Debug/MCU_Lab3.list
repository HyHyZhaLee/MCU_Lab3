
MCU_Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002704  08002704  00012704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002724  08002724  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  08002724  08002724  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002724  08002724  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002724  08002724  00012724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002728  08002728  00012728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  0800272c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000044  08002770  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002770  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d5e  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b41  00000000  00000000  00028dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002a910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002b348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d95  00000000  00000000  0002bc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b869  00000000  00000000  00042a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000821d6  00000000  00000000  0004e286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d045c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002890  00000000  00000000  000d04ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000044 	.word	0x20000044
 8000128:	00000000 	.word	0x00000000
 800012c:	080026ec 	.word	0x080026ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000048 	.word	0x20000048
 8000148:	080026ec 	.word	0x080026ec

0800014c <display7SEG>:
	0x80,
	0x90
};
#endif

void display7SEG(int number){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, (segmentNumber[number]>>0)&0x01);
 8000154:	4a35      	ldr	r2, [pc, #212]	; (800022c <display7SEG+0xe0>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	4413      	add	r3, r2
 800015a:	781b      	ldrb	r3, [r3, #0]
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	b2db      	uxtb	r3, r3
 8000162:	461a      	mov	r2, r3
 8000164:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000168:	4831      	ldr	r0, [pc, #196]	; (8000230 <display7SEG+0xe4>)
 800016a:	f001 fa96 	bl	800169a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, (segmentNumber[number]>>1)&0x01);
 800016e:	4a2f      	ldr	r2, [pc, #188]	; (800022c <display7SEG+0xe0>)
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	4413      	add	r3, r2
 8000174:	781b      	ldrb	r3, [r3, #0]
 8000176:	085b      	lsrs	r3, r3, #1
 8000178:	b2db      	uxtb	r3, r3
 800017a:	f003 0301 	and.w	r3, r3, #1
 800017e:	b2db      	uxtb	r3, r3
 8000180:	461a      	mov	r2, r3
 8000182:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000186:	482a      	ldr	r0, [pc, #168]	; (8000230 <display7SEG+0xe4>)
 8000188:	f001 fa87 	bl	800169a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, (segmentNumber[number]>>2)&0x01);
 800018c:	4a27      	ldr	r2, [pc, #156]	; (800022c <display7SEG+0xe0>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4413      	add	r3, r2
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	089b      	lsrs	r3, r3, #2
 8000196:	b2db      	uxtb	r3, r3
 8000198:	f003 0301 	and.w	r3, r3, #1
 800019c:	b2db      	uxtb	r3, r3
 800019e:	461a      	mov	r2, r3
 80001a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001a4:	4822      	ldr	r0, [pc, #136]	; (8000230 <display7SEG+0xe4>)
 80001a6:	f001 fa78 	bl	800169a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, (segmentNumber[number]>>3)&0x01);
 80001aa:	4a20      	ldr	r2, [pc, #128]	; (800022c <display7SEG+0xe0>)
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	4413      	add	r3, r2
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	08db      	lsrs	r3, r3, #3
 80001b4:	b2db      	uxtb	r3, r3
 80001b6:	f003 0301 	and.w	r3, r3, #1
 80001ba:	b2db      	uxtb	r3, r3
 80001bc:	461a      	mov	r2, r3
 80001be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001c2:	481b      	ldr	r0, [pc, #108]	; (8000230 <display7SEG+0xe4>)
 80001c4:	f001 fa69 	bl	800169a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, (segmentNumber[number]>>4)&0x01);
 80001c8:	4a18      	ldr	r2, [pc, #96]	; (800022c <display7SEG+0xe0>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	4413      	add	r3, r2
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	091b      	lsrs	r3, r3, #4
 80001d2:	b2db      	uxtb	r3, r3
 80001d4:	f003 0301 	and.w	r3, r3, #1
 80001d8:	b2db      	uxtb	r3, r3
 80001da:	461a      	mov	r2, r3
 80001dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e0:	4813      	ldr	r0, [pc, #76]	; (8000230 <display7SEG+0xe4>)
 80001e2:	f001 fa5a 	bl	800169a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, (segmentNumber[number]>>5)&0x01);
 80001e6:	4a11      	ldr	r2, [pc, #68]	; (800022c <display7SEG+0xe0>)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	4413      	add	r3, r2
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	095b      	lsrs	r3, r3, #5
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	f003 0301 	and.w	r3, r3, #1
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	461a      	mov	r2, r3
 80001fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001fe:	480c      	ldr	r0, [pc, #48]	; (8000230 <display7SEG+0xe4>)
 8000200:	f001 fa4b 	bl	800169a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, (segmentNumber[number]>>6)&0x01);
 8000204:	4a09      	ldr	r2, [pc, #36]	; (800022c <display7SEG+0xe0>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4413      	add	r3, r2
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	099b      	lsrs	r3, r3, #6
 800020e:	b2db      	uxtb	r3, r3
 8000210:	f003 0301 	and.w	r3, r3, #1
 8000214:	b2db      	uxtb	r3, r3
 8000216:	461a      	mov	r2, r3
 8000218:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800021c:	4804      	ldr	r0, [pc, #16]	; (8000230 <display7SEG+0xe4>)
 800021e:	f001 fa3c 	bl	800169a <HAL_GPIO_WritePin>
}
 8000222:	bf00      	nop
 8000224:	3708      	adds	r7, #8
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	20000000 	.word	0x20000000
 8000230:	40010800 	.word	0x40010800

08000234 <update7SEG>:
int index_led = 0;
int led_buffer[MAX_LED] = {1,2,3,4};
void update7SEG(int index){
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	switch(index){
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	2b03      	cmp	r3, #3
 8000240:	d872      	bhi.n	8000328 <update7SEG+0xf4>
 8000242:	a201      	add	r2, pc, #4	; (adr r2, 8000248 <update7SEG+0x14>)
 8000244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000248:	08000259 	.word	0x08000259
 800024c:	0800028d 	.word	0x0800028d
 8000250:	080002c1 	.word	0x080002c1
 8000254:	080002f5 	.word	0x080002f5
	case 0:
		// Display the first 7 SEG with led_buffer [0]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, ON);
 8000258:	2200      	movs	r2, #0
 800025a:	2108      	movs	r1, #8
 800025c:	4835      	ldr	r0, [pc, #212]	; (8000334 <update7SEG+0x100>)
 800025e:	f001 fa1c 	bl	800169a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, OFF);
 8000262:	2201      	movs	r2, #1
 8000264:	2110      	movs	r1, #16
 8000266:	4833      	ldr	r0, [pc, #204]	; (8000334 <update7SEG+0x100>)
 8000268:	f001 fa17 	bl	800169a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, OFF);
 800026c:	2201      	movs	r2, #1
 800026e:	2120      	movs	r1, #32
 8000270:	4830      	ldr	r0, [pc, #192]	; (8000334 <update7SEG+0x100>)
 8000272:	f001 fa12 	bl	800169a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, OFF);
 8000276:	2201      	movs	r2, #1
 8000278:	2140      	movs	r1, #64	; 0x40
 800027a:	482e      	ldr	r0, [pc, #184]	; (8000334 <update7SEG+0x100>)
 800027c:	f001 fa0d 	bl	800169a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 8000280:	4b2d      	ldr	r3, [pc, #180]	; (8000338 <update7SEG+0x104>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4618      	mov	r0, r3
 8000286:	f7ff ff61 	bl	800014c <display7SEG>
		break;
 800028a:	e04e      	b.n	800032a <update7SEG+0xf6>
	case 1:
		// Display the second 7 SEG with led_buffer [1]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, OFF);
 800028c:	2201      	movs	r2, #1
 800028e:	2108      	movs	r1, #8
 8000290:	4828      	ldr	r0, [pc, #160]	; (8000334 <update7SEG+0x100>)
 8000292:	f001 fa02 	bl	800169a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, ON);
 8000296:	2200      	movs	r2, #0
 8000298:	2110      	movs	r1, #16
 800029a:	4826      	ldr	r0, [pc, #152]	; (8000334 <update7SEG+0x100>)
 800029c:	f001 f9fd 	bl	800169a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, OFF);
 80002a0:	2201      	movs	r2, #1
 80002a2:	2120      	movs	r1, #32
 80002a4:	4823      	ldr	r0, [pc, #140]	; (8000334 <update7SEG+0x100>)
 80002a6:	f001 f9f8 	bl	800169a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, OFF);
 80002aa:	2201      	movs	r2, #1
 80002ac:	2140      	movs	r1, #64	; 0x40
 80002ae:	4821      	ldr	r0, [pc, #132]	; (8000334 <update7SEG+0x100>)
 80002b0:	f001 f9f3 	bl	800169a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 80002b4:	4b20      	ldr	r3, [pc, #128]	; (8000338 <update7SEG+0x104>)
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	4618      	mov	r0, r3
 80002ba:	f7ff ff47 	bl	800014c <display7SEG>
		break;
 80002be:	e034      	b.n	800032a <update7SEG+0xf6>
	case 2:
		// Display the second 7 SEG with led_buffer [2]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, OFF);
 80002c0:	2201      	movs	r2, #1
 80002c2:	2108      	movs	r1, #8
 80002c4:	481b      	ldr	r0, [pc, #108]	; (8000334 <update7SEG+0x100>)
 80002c6:	f001 f9e8 	bl	800169a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, OFF);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2110      	movs	r1, #16
 80002ce:	4819      	ldr	r0, [pc, #100]	; (8000334 <update7SEG+0x100>)
 80002d0:	f001 f9e3 	bl	800169a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, ON);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2120      	movs	r1, #32
 80002d8:	4816      	ldr	r0, [pc, #88]	; (8000334 <update7SEG+0x100>)
 80002da:	f001 f9de 	bl	800169a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, OFF);
 80002de:	2201      	movs	r2, #1
 80002e0:	2140      	movs	r1, #64	; 0x40
 80002e2:	4814      	ldr	r0, [pc, #80]	; (8000334 <update7SEG+0x100>)
 80002e4:	f001 f9d9 	bl	800169a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 80002e8:	4b13      	ldr	r3, [pc, #76]	; (8000338 <update7SEG+0x104>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	4618      	mov	r0, r3
 80002ee:	f7ff ff2d 	bl	800014c <display7SEG>
		break;
 80002f2:	e01a      	b.n	800032a <update7SEG+0xf6>
	case 3:
		// Display the second 7 SEG with led_buffer [3]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, OFF);
 80002f4:	2201      	movs	r2, #1
 80002f6:	2108      	movs	r1, #8
 80002f8:	480e      	ldr	r0, [pc, #56]	; (8000334 <update7SEG+0x100>)
 80002fa:	f001 f9ce 	bl	800169a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, OFF);
 80002fe:	2201      	movs	r2, #1
 8000300:	2110      	movs	r1, #16
 8000302:	480c      	ldr	r0, [pc, #48]	; (8000334 <update7SEG+0x100>)
 8000304:	f001 f9c9 	bl	800169a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, OFF);
 8000308:	2201      	movs	r2, #1
 800030a:	2120      	movs	r1, #32
 800030c:	4809      	ldr	r0, [pc, #36]	; (8000334 <update7SEG+0x100>)
 800030e:	f001 f9c4 	bl	800169a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, ON);
 8000312:	2200      	movs	r2, #0
 8000314:	2140      	movs	r1, #64	; 0x40
 8000316:	4807      	ldr	r0, [pc, #28]	; (8000334 <update7SEG+0x100>)
 8000318:	f001 f9bf 	bl	800169a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 800031c:	4b06      	ldr	r3, [pc, #24]	; (8000338 <update7SEG+0x104>)
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ff13 	bl	800014c <display7SEG>
		break;
 8000326:	e000      	b.n	800032a <update7SEG+0xf6>
	default: break;
 8000328:	bf00      	nop
	}
}
 800032a:	bf00      	nop
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40010c00 	.word	0x40010c00
 8000338:	2000000c 	.word	0x2000000c

0800033c <display_resetALL>:

void display_resetALL(){
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, OFF);
 8000342:	2201      	movs	r2, #1
 8000344:	2101      	movs	r1, #1
 8000346:	4819      	ldr	r0, [pc, #100]	; (80003ac <display_resetALL+0x70>)
 8000348:	f001 f9a7 	bl	800169a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, OFF);
 800034c:	2201      	movs	r2, #1
 800034e:	2102      	movs	r1, #2
 8000350:	4816      	ldr	r0, [pc, #88]	; (80003ac <display_resetALL+0x70>)
 8000352:	f001 f9a2 	bl	800169a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, OFF);
 8000356:	2201      	movs	r2, #1
 8000358:	2104      	movs	r1, #4
 800035a:	4814      	ldr	r0, [pc, #80]	; (80003ac <display_resetALL+0x70>)
 800035c:	f001 f99d 	bl	800169a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, OFF);
 8000360:	2201      	movs	r2, #1
 8000362:	2108      	movs	r1, #8
 8000364:	4811      	ldr	r0, [pc, #68]	; (80003ac <display_resetALL+0x70>)
 8000366:	f001 f998 	bl	800169a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, OFF);
 800036a:	2201      	movs	r2, #1
 800036c:	2110      	movs	r1, #16
 800036e:	480f      	ldr	r0, [pc, #60]	; (80003ac <display_resetALL+0x70>)
 8000370:	f001 f993 	bl	800169a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, OFF);
 8000374:	2201      	movs	r2, #1
 8000376:	2120      	movs	r1, #32
 8000378:	480c      	ldr	r0, [pc, #48]	; (80003ac <display_resetALL+0x70>)
 800037a:	f001 f98e 	bl	800169a <HAL_GPIO_WritePin>

	index_led = 0;
 800037e:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <display_resetALL+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<MAX_LED; i++) led_buffer[i] = 0;
 8000384:	2300      	movs	r3, #0
 8000386:	607b      	str	r3, [r7, #4]
 8000388:	e007      	b.n	800039a <display_resetALL+0x5e>
 800038a:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <display_resetALL+0x78>)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2100      	movs	r1, #0
 8000390:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	3301      	adds	r3, #1
 8000398:	607b      	str	r3, [r7, #4]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	2b03      	cmp	r3, #3
 800039e:	ddf4      	ble.n	800038a <display_resetALL+0x4e>
}
 80003a0:	bf00      	nop
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40010800 	.word	0x40010800
 80003b0:	20000060 	.word	0x20000060
 80003b4:	2000000c 	.word	0x2000000c

080003b8 <display_traffic1>:


void display_traffic1(int input){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	switch(input){
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	2b03      	cmp	r3, #3
 80003c4:	d029      	beq.n	800041a <display_traffic1+0x62>
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	2b03      	cmp	r3, #3
 80003ca:	dc36      	bgt.n	800043a <display_traffic1+0x82>
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d003      	beq.n	80003da <display_traffic1+0x22>
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2b02      	cmp	r3, #2
 80003d6:	d010      	beq.n	80003fa <display_traffic1+0x42>
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, OFF);
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, OFF);
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, ON);
			break;
		default:
			break;
 80003d8:	e02f      	b.n	800043a <display_traffic1+0x82>
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, ON);
 80003da:	2200      	movs	r2, #0
 80003dc:	2101      	movs	r1, #1
 80003de:	4819      	ldr	r0, [pc, #100]	; (8000444 <display_traffic1+0x8c>)
 80003e0:	f001 f95b 	bl	800169a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, OFF);
 80003e4:	2201      	movs	r2, #1
 80003e6:	2102      	movs	r1, #2
 80003e8:	4816      	ldr	r0, [pc, #88]	; (8000444 <display_traffic1+0x8c>)
 80003ea:	f001 f956 	bl	800169a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, OFF);
 80003ee:	2201      	movs	r2, #1
 80003f0:	2104      	movs	r1, #4
 80003f2:	4814      	ldr	r0, [pc, #80]	; (8000444 <display_traffic1+0x8c>)
 80003f4:	f001 f951 	bl	800169a <HAL_GPIO_WritePin>
			break;
 80003f8:	e020      	b.n	800043c <display_traffic1+0x84>
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, OFF);
 80003fa:	2201      	movs	r2, #1
 80003fc:	2101      	movs	r1, #1
 80003fe:	4811      	ldr	r0, [pc, #68]	; (8000444 <display_traffic1+0x8c>)
 8000400:	f001 f94b 	bl	800169a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, ON);
 8000404:	2200      	movs	r2, #0
 8000406:	2102      	movs	r1, #2
 8000408:	480e      	ldr	r0, [pc, #56]	; (8000444 <display_traffic1+0x8c>)
 800040a:	f001 f946 	bl	800169a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, OFF);
 800040e:	2201      	movs	r2, #1
 8000410:	2104      	movs	r1, #4
 8000412:	480c      	ldr	r0, [pc, #48]	; (8000444 <display_traffic1+0x8c>)
 8000414:	f001 f941 	bl	800169a <HAL_GPIO_WritePin>
			break;
 8000418:	e010      	b.n	800043c <display_traffic1+0x84>
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, OFF);
 800041a:	2201      	movs	r2, #1
 800041c:	2101      	movs	r1, #1
 800041e:	4809      	ldr	r0, [pc, #36]	; (8000444 <display_traffic1+0x8c>)
 8000420:	f001 f93b 	bl	800169a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, OFF);
 8000424:	2201      	movs	r2, #1
 8000426:	2102      	movs	r1, #2
 8000428:	4806      	ldr	r0, [pc, #24]	; (8000444 <display_traffic1+0x8c>)
 800042a:	f001 f936 	bl	800169a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, ON);
 800042e:	2200      	movs	r2, #0
 8000430:	2104      	movs	r1, #4
 8000432:	4804      	ldr	r0, [pc, #16]	; (8000444 <display_traffic1+0x8c>)
 8000434:	f001 f931 	bl	800169a <HAL_GPIO_WritePin>
			break;
 8000438:	e000      	b.n	800043c <display_traffic1+0x84>
			break;
 800043a:	bf00      	nop
	}
}
 800043c:	bf00      	nop
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40010800 	.word	0x40010800

08000448 <display_traffic2>:
void display_traffic2(int input){
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	switch(input){
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2b03      	cmp	r3, #3
 8000454:	d029      	beq.n	80004aa <display_traffic2+0x62>
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	2b03      	cmp	r3, #3
 800045a:	dc36      	bgt.n	80004ca <display_traffic2+0x82>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d003      	beq.n	800046a <display_traffic2+0x22>
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	2b02      	cmp	r3, #2
 8000466:	d010      	beq.n	800048a <display_traffic2+0x42>
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, OFF);
			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, OFF);
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, ON);
			break;
		default:
			break;
 8000468:	e02f      	b.n	80004ca <display_traffic2+0x82>
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, ON);
 800046a:	2200      	movs	r2, #0
 800046c:	2108      	movs	r1, #8
 800046e:	4819      	ldr	r0, [pc, #100]	; (80004d4 <display_traffic2+0x8c>)
 8000470:	f001 f913 	bl	800169a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, OFF);
 8000474:	2201      	movs	r2, #1
 8000476:	2110      	movs	r1, #16
 8000478:	4816      	ldr	r0, [pc, #88]	; (80004d4 <display_traffic2+0x8c>)
 800047a:	f001 f90e 	bl	800169a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, OFF);
 800047e:	2201      	movs	r2, #1
 8000480:	2120      	movs	r1, #32
 8000482:	4814      	ldr	r0, [pc, #80]	; (80004d4 <display_traffic2+0x8c>)
 8000484:	f001 f909 	bl	800169a <HAL_GPIO_WritePin>
			break;
 8000488:	e020      	b.n	80004cc <display_traffic2+0x84>
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, OFF);
 800048a:	2201      	movs	r2, #1
 800048c:	2108      	movs	r1, #8
 800048e:	4811      	ldr	r0, [pc, #68]	; (80004d4 <display_traffic2+0x8c>)
 8000490:	f001 f903 	bl	800169a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, ON);
 8000494:	2200      	movs	r2, #0
 8000496:	2110      	movs	r1, #16
 8000498:	480e      	ldr	r0, [pc, #56]	; (80004d4 <display_traffic2+0x8c>)
 800049a:	f001 f8fe 	bl	800169a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, OFF);
 800049e:	2201      	movs	r2, #1
 80004a0:	2120      	movs	r1, #32
 80004a2:	480c      	ldr	r0, [pc, #48]	; (80004d4 <display_traffic2+0x8c>)
 80004a4:	f001 f8f9 	bl	800169a <HAL_GPIO_WritePin>
			break;
 80004a8:	e010      	b.n	80004cc <display_traffic2+0x84>
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, OFF);
 80004aa:	2201      	movs	r2, #1
 80004ac:	2108      	movs	r1, #8
 80004ae:	4809      	ldr	r0, [pc, #36]	; (80004d4 <display_traffic2+0x8c>)
 80004b0:	f001 f8f3 	bl	800169a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, OFF);
 80004b4:	2201      	movs	r2, #1
 80004b6:	2110      	movs	r1, #16
 80004b8:	4806      	ldr	r0, [pc, #24]	; (80004d4 <display_traffic2+0x8c>)
 80004ba:	f001 f8ee 	bl	800169a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, ON);
 80004be:	2200      	movs	r2, #0
 80004c0:	2120      	movs	r1, #32
 80004c2:	4804      	ldr	r0, [pc, #16]	; (80004d4 <display_traffic2+0x8c>)
 80004c4:	f001 f8e9 	bl	800169a <HAL_GPIO_WritePin>
			break;
 80004c8:	e000      	b.n	80004cc <display_traffic2+0x84>
			break;
 80004ca:	bf00      	nop
	}
}
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40010800 	.word	0x40010800

080004d8 <display_toggleLed>:

void display_toggleLed(int input, int duration){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
	if(timer_flag[1]){
 80004e2:	4b1a      	ldr	r3, [pc, #104]	; (800054c <display_toggleLed+0x74>)
 80004e4:	685b      	ldr	r3, [r3, #4]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d02b      	beq.n	8000542 <display_toggleLed+0x6a>
		setTimer(duration, 1);
 80004ea:	2101      	movs	r1, #1
 80004ec:	6838      	ldr	r0, [r7, #0]
 80004ee:	f000 fcb5 	bl	8000e5c <setTimer>
		switch(input){
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2b03      	cmp	r3, #3
 80004f6:	d01b      	beq.n	8000530 <display_toggleLed+0x58>
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2b03      	cmp	r3, #3
 80004fc:	dc22      	bgt.n	8000544 <display_toggleLed+0x6c>
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2b01      	cmp	r3, #1
 8000502:	d003      	beq.n	800050c <display_toggleLed+0x34>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2b02      	cmp	r3, #2
 8000508:	d009      	beq.n	800051e <display_toggleLed+0x46>
				HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
				HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
				break;
		}
	}
}
 800050a:	e01b      	b.n	8000544 <display_toggleLed+0x6c>
				HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 800050c:	2101      	movs	r1, #1
 800050e:	4810      	ldr	r0, [pc, #64]	; (8000550 <display_toggleLed+0x78>)
 8000510:	f001 f8db 	bl	80016ca <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8000514:	2108      	movs	r1, #8
 8000516:	480e      	ldr	r0, [pc, #56]	; (8000550 <display_toggleLed+0x78>)
 8000518:	f001 f8d7 	bl	80016ca <HAL_GPIO_TogglePin>
				break;
 800051c:	e012      	b.n	8000544 <display_toggleLed+0x6c>
				HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 800051e:	2102      	movs	r1, #2
 8000520:	480b      	ldr	r0, [pc, #44]	; (8000550 <display_toggleLed+0x78>)
 8000522:	f001 f8d2 	bl	80016ca <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 8000526:	2110      	movs	r1, #16
 8000528:	4809      	ldr	r0, [pc, #36]	; (8000550 <display_toggleLed+0x78>)
 800052a:	f001 f8ce 	bl	80016ca <HAL_GPIO_TogglePin>
				break;
 800052e:	e009      	b.n	8000544 <display_toggleLed+0x6c>
				HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8000530:	2104      	movs	r1, #4
 8000532:	4807      	ldr	r0, [pc, #28]	; (8000550 <display_toggleLed+0x78>)
 8000534:	f001 f8c9 	bl	80016ca <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 8000538:	2120      	movs	r1, #32
 800053a:	4805      	ldr	r0, [pc, #20]	; (8000550 <display_toggleLed+0x78>)
 800053c:	f001 f8c5 	bl	80016ca <HAL_GPIO_TogglePin>
				break;
 8000540:	e000      	b.n	8000544 <display_toggleLed+0x6c>
	}
 8000542:	bf00      	nop
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	200000e8 	.word	0x200000e8
 8000550:	40010800 	.word	0x40010800

08000554 <led7Run>:

void led7Run(){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	update7SEG(index_led++);
 8000558:	4b08      	ldr	r3, [pc, #32]	; (800057c <led7Run+0x28>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	1c5a      	adds	r2, r3, #1
 800055e:	4907      	ldr	r1, [pc, #28]	; (800057c <led7Run+0x28>)
 8000560:	600a      	str	r2, [r1, #0]
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff fe66 	bl	8000234 <update7SEG>
	if(index_led >= MAX_LED) index_led = 0;
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <led7Run+0x28>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b03      	cmp	r3, #3
 800056e:	dd02      	ble.n	8000576 <led7Run+0x22>
 8000570:	4b02      	ldr	r3, [pc, #8]	; (800057c <led7Run+0x28>)
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000060 	.word	0x20000060

08000580 <fsm_reset>:
int duration_YELLOW_temp = DURATION_YELLOW;
int duration_GREEN_temp = DURATION_GREEN;

int counter1, counter2;

void fsm_reset(){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	counter1 = 0;
 8000584:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <fsm_reset+0x3c>)
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
	counter2 = 0;
 800058a:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <fsm_reset+0x40>)
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
	STATUS1 = INIT;
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <fsm_reset+0x44>)
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
	STATUS2 = INIT;
 8000596:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <fsm_reset+0x48>)
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
	display_resetALL();
 800059c:	f7ff fece 	bl	800033c <display_resetALL>
	LED_RED_temp = duration_RED;
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <fsm_reset+0x4c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <fsm_reset+0x50>)
 80005a6:	6013      	str	r3, [r2, #0]
	duration_YELLOW_temp = duration_YELLOW;
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <fsm_reset+0x54>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a0a      	ldr	r2, [pc, #40]	; (80005d8 <fsm_reset+0x58>)
 80005ae:	6013      	str	r3, [r2, #0]
	duration_GREEN_temp = duration_GREEN;
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <fsm_reset+0x5c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <fsm_reset+0x60>)
 80005b6:	6013      	str	r3, [r2, #0]
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	2000006c 	.word	0x2000006c
 80005c0:	20000070 	.word	0x20000070
 80005c4:	20000064 	.word	0x20000064
 80005c8:	20000068 	.word	0x20000068
 80005cc:	20000020 	.word	0x20000020
 80005d0:	2000002c 	.word	0x2000002c
 80005d4:	20000024 	.word	0x20000024
 80005d8:	20000030 	.word	0x20000030
 80005dc:	20000028 	.word	0x20000028
 80005e0:	20000034 	.word	0x20000034

080005e4 <fsm_automatic>:
void fsm_automatic(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	led_buffer[1] = counter1%10;
 80005e8:	4b61      	ldr	r3, [pc, #388]	; (8000770 <fsm_automatic+0x18c>)
 80005ea:	6819      	ldr	r1, [r3, #0]
 80005ec:	4b61      	ldr	r3, [pc, #388]	; (8000774 <fsm_automatic+0x190>)
 80005ee:	fb83 2301 	smull	r2, r3, r3, r1
 80005f2:	109a      	asrs	r2, r3, #2
 80005f4:	17cb      	asrs	r3, r1, #31
 80005f6:	1ad2      	subs	r2, r2, r3
 80005f8:	4613      	mov	r3, r2
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	4413      	add	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	1aca      	subs	r2, r1, r3
 8000602:	4b5d      	ldr	r3, [pc, #372]	; (8000778 <fsm_automatic+0x194>)
 8000604:	605a      	str	r2, [r3, #4]
	led_buffer[0] = (counter1-led_buffer[1])/10;
 8000606:	4b5a      	ldr	r3, [pc, #360]	; (8000770 <fsm_automatic+0x18c>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4b5b      	ldr	r3, [pc, #364]	; (8000778 <fsm_automatic+0x194>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	4a58      	ldr	r2, [pc, #352]	; (8000774 <fsm_automatic+0x190>)
 8000612:	fb82 1203 	smull	r1, r2, r2, r3
 8000616:	1092      	asrs	r2, r2, #2
 8000618:	17db      	asrs	r3, r3, #31
 800061a:	1ad3      	subs	r3, r2, r3
 800061c:	4a56      	ldr	r2, [pc, #344]	; (8000778 <fsm_automatic+0x194>)
 800061e:	6013      	str	r3, [r2, #0]
	led_buffer[3] = counter2%10;
 8000620:	4b56      	ldr	r3, [pc, #344]	; (800077c <fsm_automatic+0x198>)
 8000622:	6819      	ldr	r1, [r3, #0]
 8000624:	4b53      	ldr	r3, [pc, #332]	; (8000774 <fsm_automatic+0x190>)
 8000626:	fb83 2301 	smull	r2, r3, r3, r1
 800062a:	109a      	asrs	r2, r3, #2
 800062c:	17cb      	asrs	r3, r1, #31
 800062e:	1ad2      	subs	r2, r2, r3
 8000630:	4613      	mov	r3, r2
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	4413      	add	r3, r2
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	1aca      	subs	r2, r1, r3
 800063a:	4b4f      	ldr	r3, [pc, #316]	; (8000778 <fsm_automatic+0x194>)
 800063c:	60da      	str	r2, [r3, #12]
	led_buffer[2] = (counter2-led_buffer[3])/10;
 800063e:	4b4f      	ldr	r3, [pc, #316]	; (800077c <fsm_automatic+0x198>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	4b4d      	ldr	r3, [pc, #308]	; (8000778 <fsm_automatic+0x194>)
 8000644:	68db      	ldr	r3, [r3, #12]
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	4a4a      	ldr	r2, [pc, #296]	; (8000774 <fsm_automatic+0x190>)
 800064a:	fb82 1203 	smull	r1, r2, r2, r3
 800064e:	1092      	asrs	r2, r2, #2
 8000650:	17db      	asrs	r3, r3, #31
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	4a48      	ldr	r2, [pc, #288]	; (8000778 <fsm_automatic+0x194>)
 8000656:	6093      	str	r3, [r2, #8]

	switch(STATUS1){
 8000658:	4b49      	ldr	r3, [pc, #292]	; (8000780 <fsm_automatic+0x19c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b03      	cmp	r3, #3
 800065e:	d840      	bhi.n	80006e2 <fsm_automatic+0xfe>
 8000660:	a201      	add	r2, pc, #4	; (adr r2, 8000668 <fsm_automatic+0x84>)
 8000662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000666:	bf00      	nop
 8000668:	08000679 	.word	0x08000679
 800066c:	08000689 	.word	0x08000689
 8000670:	080006c5 	.word	0x080006c5
 8000674:	080006a7 	.word	0x080006a7
		case INIT:
			STATUS1 = RED;
 8000678:	4b41      	ldr	r3, [pc, #260]	; (8000780 <fsm_automatic+0x19c>)
 800067a:	2201      	movs	r2, #1
 800067c:	601a      	str	r2, [r3, #0]
			counter1 = duration_RED;
 800067e:	4b41      	ldr	r3, [pc, #260]	; (8000784 <fsm_automatic+0x1a0>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a3b      	ldr	r2, [pc, #236]	; (8000770 <fsm_automatic+0x18c>)
 8000684:	6013      	str	r3, [r2, #0]
			break;
 8000686:	e02c      	b.n	80006e2 <fsm_automatic+0xfe>
		case RED:
			if(counter1<0){
 8000688:	4b39      	ldr	r3, [pc, #228]	; (8000770 <fsm_automatic+0x18c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	da06      	bge.n	800069e <fsm_automatic+0xba>
				STATUS1 = GREEN;
 8000690:	4b3b      	ldr	r3, [pc, #236]	; (8000780 <fsm_automatic+0x19c>)
 8000692:	2203      	movs	r2, #3
 8000694:	601a      	str	r2, [r3, #0]
				counter1 = duration_GREEN;
 8000696:	4b3c      	ldr	r3, [pc, #240]	; (8000788 <fsm_automatic+0x1a4>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a35      	ldr	r2, [pc, #212]	; (8000770 <fsm_automatic+0x18c>)
 800069c:	6013      	str	r3, [r2, #0]
			}
			display_traffic1(RED);
 800069e:	2001      	movs	r0, #1
 80006a0:	f7ff fe8a 	bl	80003b8 <display_traffic1>
			break;
 80006a4:	e01d      	b.n	80006e2 <fsm_automatic+0xfe>
		case GREEN:
			if(counter1<0){
 80006a6:	4b32      	ldr	r3, [pc, #200]	; (8000770 <fsm_automatic+0x18c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	da06      	bge.n	80006bc <fsm_automatic+0xd8>
				STATUS1 = YELLOW;
 80006ae:	4b34      	ldr	r3, [pc, #208]	; (8000780 <fsm_automatic+0x19c>)
 80006b0:	2202      	movs	r2, #2
 80006b2:	601a      	str	r2, [r3, #0]
				counter1 = duration_YELLOW;
 80006b4:	4b35      	ldr	r3, [pc, #212]	; (800078c <fsm_automatic+0x1a8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a2d      	ldr	r2, [pc, #180]	; (8000770 <fsm_automatic+0x18c>)
 80006ba:	6013      	str	r3, [r2, #0]
			}
			display_traffic1(GREEN);
 80006bc:	2003      	movs	r0, #3
 80006be:	f7ff fe7b 	bl	80003b8 <display_traffic1>
			break;
 80006c2:	e00e      	b.n	80006e2 <fsm_automatic+0xfe>
		case YELLOW:
			if(counter1<0){
 80006c4:	4b2a      	ldr	r3, [pc, #168]	; (8000770 <fsm_automatic+0x18c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	da06      	bge.n	80006da <fsm_automatic+0xf6>
				STATUS1 = RED;
 80006cc:	4b2c      	ldr	r3, [pc, #176]	; (8000780 <fsm_automatic+0x19c>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	601a      	str	r2, [r3, #0]
				counter1 = duration_RED;
 80006d2:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <fsm_automatic+0x1a0>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a26      	ldr	r2, [pc, #152]	; (8000770 <fsm_automatic+0x18c>)
 80006d8:	6013      	str	r3, [r2, #0]
			}
			display_traffic1(YELLOW);
 80006da:	2002      	movs	r0, #2
 80006dc:	f7ff fe6c 	bl	80003b8 <display_traffic1>
			break;
 80006e0:	bf00      	nop
	}

	switch(STATUS2){
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <fsm_automatic+0x1ac>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b03      	cmp	r3, #3
 80006e8:	d83f      	bhi.n	800076a <fsm_automatic+0x186>
 80006ea:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <fsm_automatic+0x10c>)
 80006ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f0:	08000701 	.word	0x08000701
 80006f4:	08000711 	.word	0x08000711
 80006f8:	0800074d 	.word	0x0800074d
 80006fc:	0800072f 	.word	0x0800072f
		case INIT:
			STATUS2 = GREEN;
 8000700:	4b23      	ldr	r3, [pc, #140]	; (8000790 <fsm_automatic+0x1ac>)
 8000702:	2203      	movs	r2, #3
 8000704:	601a      	str	r2, [r3, #0]
			counter2 = duration_GREEN;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <fsm_automatic+0x1a4>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a1c      	ldr	r2, [pc, #112]	; (800077c <fsm_automatic+0x198>)
 800070c:	6013      	str	r3, [r2, #0]
			break;
 800070e:	e02c      	b.n	800076a <fsm_automatic+0x186>
		case RED:
			if(counter2<0){
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <fsm_automatic+0x198>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	da06      	bge.n	8000726 <fsm_automatic+0x142>
				STATUS2 = GREEN;
 8000718:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <fsm_automatic+0x1ac>)
 800071a:	2203      	movs	r2, #3
 800071c:	601a      	str	r2, [r3, #0]
				counter2 = duration_GREEN;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <fsm_automatic+0x1a4>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a16      	ldr	r2, [pc, #88]	; (800077c <fsm_automatic+0x198>)
 8000724:	6013      	str	r3, [r2, #0]
			}
			display_traffic2(RED);
 8000726:	2001      	movs	r0, #1
 8000728:	f7ff fe8e 	bl	8000448 <display_traffic2>
			break;
 800072c:	e01d      	b.n	800076a <fsm_automatic+0x186>
		case GREEN:
			if(counter2<0){
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <fsm_automatic+0x198>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	da06      	bge.n	8000744 <fsm_automatic+0x160>
				STATUS2 = YELLOW;
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <fsm_automatic+0x1ac>)
 8000738:	2202      	movs	r2, #2
 800073a:	601a      	str	r2, [r3, #0]
				counter2 = duration_YELLOW;
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <fsm_automatic+0x1a8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a0e      	ldr	r2, [pc, #56]	; (800077c <fsm_automatic+0x198>)
 8000742:	6013      	str	r3, [r2, #0]
			}
			display_traffic2(GREEN);
 8000744:	2003      	movs	r0, #3
 8000746:	f7ff fe7f 	bl	8000448 <display_traffic2>
			break;
 800074a:	e00e      	b.n	800076a <fsm_automatic+0x186>
		case YELLOW:
			if(counter2<0){
 800074c:	4b0b      	ldr	r3, [pc, #44]	; (800077c <fsm_automatic+0x198>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	da06      	bge.n	8000762 <fsm_automatic+0x17e>
				STATUS2 = RED;
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <fsm_automatic+0x1ac>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
				counter2 = duration_RED;
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <fsm_automatic+0x1a0>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a07      	ldr	r2, [pc, #28]	; (800077c <fsm_automatic+0x198>)
 8000760:	6013      	str	r3, [r2, #0]
			}
			display_traffic2(YELLOW);
 8000762:	2002      	movs	r0, #2
 8000764:	f7ff fe70 	bl	8000448 <display_traffic2>
			break;
 8000768:	bf00      	nop
	}
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2000006c 	.word	0x2000006c
 8000774:	66666667 	.word	0x66666667
 8000778:	2000000c 	.word	0x2000000c
 800077c:	20000070 	.word	0x20000070
 8000780:	20000064 	.word	0x20000064
 8000784:	20000020 	.word	0x20000020
 8000788:	20000028 	.word	0x20000028
 800078c:	20000024 	.word	0x20000024
 8000790:	20000068 	.word	0x20000068

08000794 <fsm_run>:
void fsm_run(){
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	switch (TRAFFIC_MODE) {
 8000798:	4b58      	ldr	r3, [pc, #352]	; (80008fc <fsm_run+0x168>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	3b0a      	subs	r3, #10
 800079e:	2b03      	cmp	r3, #3
 80007a0:	f200 8084 	bhi.w	80008ac <fsm_run+0x118>
 80007a4:	a201      	add	r2, pc, #4	; (adr r2, 80007ac <fsm_run+0x18>)
 80007a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007aa:	bf00      	nop
 80007ac:	080007bd 	.word	0x080007bd
 80007b0:	080007c3 	.word	0x080007c3
 80007b4:	08000811 	.word	0x08000811
 80007b8:	0800085f 	.word	0x0800085f
		case MODE_AUTO:
			fsm_automatic();
 80007bc:	f7ff ff12 	bl	80005e4 <fsm_automatic>
			break;
 80007c0:	e075      	b.n	80008ae <fsm_run+0x11a>
		case MODE_RED:
			display_toggleLed(RED, TIMER_LED_BLINKY);
 80007c2:	21fa      	movs	r1, #250	; 0xfa
 80007c4:	2001      	movs	r0, #1
 80007c6:	f7ff fe87 	bl	80004d8 <display_toggleLed>
			led_buffer[0] = 0;
 80007ca:	4b4d      	ldr	r3, [pc, #308]	; (8000900 <fsm_run+0x16c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 1;
 80007d0:	4b4b      	ldr	r3, [pc, #300]	; (8000900 <fsm_run+0x16c>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	605a      	str	r2, [r3, #4]
			led_buffer[3] = LED_RED_temp%10;
 80007d6:	4b4b      	ldr	r3, [pc, #300]	; (8000904 <fsm_run+0x170>)
 80007d8:	6819      	ldr	r1, [r3, #0]
 80007da:	4b4b      	ldr	r3, [pc, #300]	; (8000908 <fsm_run+0x174>)
 80007dc:	fb83 2301 	smull	r2, r3, r3, r1
 80007e0:	109a      	asrs	r2, r3, #2
 80007e2:	17cb      	asrs	r3, r1, #31
 80007e4:	1ad2      	subs	r2, r2, r3
 80007e6:	4613      	mov	r3, r2
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	4413      	add	r3, r2
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	1aca      	subs	r2, r1, r3
 80007f0:	4b43      	ldr	r3, [pc, #268]	; (8000900 <fsm_run+0x16c>)
 80007f2:	60da      	str	r2, [r3, #12]
			led_buffer[2] = (LED_RED_temp - led_buffer[3])/10;
 80007f4:	4b43      	ldr	r3, [pc, #268]	; (8000904 <fsm_run+0x170>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	4b41      	ldr	r3, [pc, #260]	; (8000900 <fsm_run+0x16c>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	4a42      	ldr	r2, [pc, #264]	; (8000908 <fsm_run+0x174>)
 8000800:	fb82 1203 	smull	r1, r2, r2, r3
 8000804:	1092      	asrs	r2, r2, #2
 8000806:	17db      	asrs	r3, r3, #31
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	4a3d      	ldr	r2, [pc, #244]	; (8000900 <fsm_run+0x16c>)
 800080c:	6093      	str	r3, [r2, #8]
			break;
 800080e:	e04e      	b.n	80008ae <fsm_run+0x11a>
		case MODE_YELLOW:
			display_toggleLed(YELLOW, TIMER_LED_BLINKY);
 8000810:	21fa      	movs	r1, #250	; 0xfa
 8000812:	2002      	movs	r0, #2
 8000814:	f7ff fe60 	bl	80004d8 <display_toggleLed>
			led_buffer[0] = 0;
 8000818:	4b39      	ldr	r3, [pc, #228]	; (8000900 <fsm_run+0x16c>)
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 1;
 800081e:	4b38      	ldr	r3, [pc, #224]	; (8000900 <fsm_run+0x16c>)
 8000820:	2201      	movs	r2, #1
 8000822:	605a      	str	r2, [r3, #4]
			led_buffer[3] = duration_YELLOW_temp%10;
 8000824:	4b39      	ldr	r3, [pc, #228]	; (800090c <fsm_run+0x178>)
 8000826:	6819      	ldr	r1, [r3, #0]
 8000828:	4b37      	ldr	r3, [pc, #220]	; (8000908 <fsm_run+0x174>)
 800082a:	fb83 2301 	smull	r2, r3, r3, r1
 800082e:	109a      	asrs	r2, r3, #2
 8000830:	17cb      	asrs	r3, r1, #31
 8000832:	1ad2      	subs	r2, r2, r3
 8000834:	4613      	mov	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4413      	add	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	1aca      	subs	r2, r1, r3
 800083e:	4b30      	ldr	r3, [pc, #192]	; (8000900 <fsm_run+0x16c>)
 8000840:	60da      	str	r2, [r3, #12]
			led_buffer[2] = (duration_YELLOW_temp - led_buffer[3])/10;
 8000842:	4b32      	ldr	r3, [pc, #200]	; (800090c <fsm_run+0x178>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	4b2e      	ldr	r3, [pc, #184]	; (8000900 <fsm_run+0x16c>)
 8000848:	68db      	ldr	r3, [r3, #12]
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	4a2e      	ldr	r2, [pc, #184]	; (8000908 <fsm_run+0x174>)
 800084e:	fb82 1203 	smull	r1, r2, r2, r3
 8000852:	1092      	asrs	r2, r2, #2
 8000854:	17db      	asrs	r3, r3, #31
 8000856:	1ad3      	subs	r3, r2, r3
 8000858:	4a29      	ldr	r2, [pc, #164]	; (8000900 <fsm_run+0x16c>)
 800085a:	6093      	str	r3, [r2, #8]
			break;
 800085c:	e027      	b.n	80008ae <fsm_run+0x11a>
		case MODE_GREEN:
			display_toggleLed(GREEN, TIMER_LED_BLINKY);
 800085e:	21fa      	movs	r1, #250	; 0xfa
 8000860:	2003      	movs	r0, #3
 8000862:	f7ff fe39 	bl	80004d8 <display_toggleLed>
			led_buffer[0] = 0;
 8000866:	4b26      	ldr	r3, [pc, #152]	; (8000900 <fsm_run+0x16c>)
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 1;
 800086c:	4b24      	ldr	r3, [pc, #144]	; (8000900 <fsm_run+0x16c>)
 800086e:	2201      	movs	r2, #1
 8000870:	605a      	str	r2, [r3, #4]
			led_buffer[3] = duration_GREEN_temp%10;
 8000872:	4b27      	ldr	r3, [pc, #156]	; (8000910 <fsm_run+0x17c>)
 8000874:	6819      	ldr	r1, [r3, #0]
 8000876:	4b24      	ldr	r3, [pc, #144]	; (8000908 <fsm_run+0x174>)
 8000878:	fb83 2301 	smull	r2, r3, r3, r1
 800087c:	109a      	asrs	r2, r3, #2
 800087e:	17cb      	asrs	r3, r1, #31
 8000880:	1ad2      	subs	r2, r2, r3
 8000882:	4613      	mov	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	4413      	add	r3, r2
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	1aca      	subs	r2, r1, r3
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <fsm_run+0x16c>)
 800088e:	60da      	str	r2, [r3, #12]
			led_buffer[2] = (duration_GREEN_temp - led_buffer[3])/10;
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <fsm_run+0x17c>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <fsm_run+0x16c>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	4a1b      	ldr	r2, [pc, #108]	; (8000908 <fsm_run+0x174>)
 800089c:	fb82 1203 	smull	r1, r2, r2, r3
 80008a0:	1092      	asrs	r2, r2, #2
 80008a2:	17db      	asrs	r3, r3, #31
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	4a16      	ldr	r2, [pc, #88]	; (8000900 <fsm_run+0x16c>)
 80008a8:	6093      	str	r3, [r2, #8]
			break;
 80008aa:	e000      	b.n	80008ae <fsm_run+0x11a>
		default:
			break;
 80008ac:	bf00      	nop
	}

	if(timer_flag[0]){
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <fsm_run+0x180>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d016      	beq.n	80008e4 <fsm_run+0x150>
		setTimer(1000, 0);
 80008b6:	2100      	movs	r1, #0
 80008b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008bc:	f000 face 	bl	8000e5c <setTimer>
		if(counter1>=0) counter1--;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <fsm_run+0x184>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	db04      	blt.n	80008d2 <fsm_run+0x13e>
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <fsm_run+0x184>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	3b01      	subs	r3, #1
 80008ce:	4a12      	ldr	r2, [pc, #72]	; (8000918 <fsm_run+0x184>)
 80008d0:	6013      	str	r3, [r2, #0]
		if(counter2>=0) counter2--;
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <fsm_run+0x188>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	db04      	blt.n	80008e4 <fsm_run+0x150>
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <fsm_run+0x188>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	3b01      	subs	r3, #1
 80008e0:	4a0e      	ldr	r2, [pc, #56]	; (800091c <fsm_run+0x188>)
 80008e2:	6013      	str	r3, [r2, #0]
	}
	if(timer_flag[2]){
 80008e4:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <fsm_run+0x180>)
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d005      	beq.n	80008f8 <fsm_run+0x164>
		setTimer(TIMER_7_SEGMENT, 2);
 80008ec:	2102      	movs	r1, #2
 80008ee:	20fa      	movs	r0, #250	; 0xfa
 80008f0:	f000 fab4 	bl	8000e5c <setTimer>
		led7Run();
 80008f4:	f7ff fe2e 	bl	8000554 <led7Run>
	}

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	2000001c 	.word	0x2000001c
 8000900:	2000000c 	.word	0x2000000c
 8000904:	2000002c 	.word	0x2000002c
 8000908:	66666667 	.word	0x66666667
 800090c:	20000030 	.word	0x20000030
 8000910:	20000034 	.word	0x20000034
 8000914:	200000e8 	.word	0x200000e8
 8000918:	2000006c 	.word	0x2000006c
 800091c:	20000070 	.word	0x20000070

08000920 <fsm_for_input_processing>:
void fsm_for_input_processing(void){
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	if(is_button_pressed(0)){
 8000924:	2000      	movs	r0, #0
 8000926:	f000 f96d 	bl	8000c04 <is_button_pressed>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d00d      	beq.n	800094c <fsm_for_input_processing+0x2c>
		TRAFFIC_MODE++;
 8000930:	4b2e      	ldr	r3, [pc, #184]	; (80009ec <fsm_for_input_processing+0xcc>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	4a2d      	ldr	r2, [pc, #180]	; (80009ec <fsm_for_input_processing+0xcc>)
 8000938:	6013      	str	r3, [r2, #0]
		if(TRAFFIC_MODE>MODE_GREEN) TRAFFIC_MODE = MODE_AUTO;
 800093a:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <fsm_for_input_processing+0xcc>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b0d      	cmp	r3, #13
 8000940:	dd02      	ble.n	8000948 <fsm_for_input_processing+0x28>
 8000942:	4b2a      	ldr	r3, [pc, #168]	; (80009ec <fsm_for_input_processing+0xcc>)
 8000944:	220a      	movs	r2, #10
 8000946:	601a      	str	r2, [r3, #0]
		fsm_reset();
 8000948:	f7ff fe1a 	bl	8000580 <fsm_reset>
	}
	if(is_button_pressed(1)){
 800094c:	2001      	movs	r0, #1
 800094e:	f000 f959 	bl	8000c04 <is_button_pressed>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d021      	beq.n	800099c <fsm_for_input_processing+0x7c>
		switch (TRAFFIC_MODE) {
 8000958:	4b24      	ldr	r3, [pc, #144]	; (80009ec <fsm_for_input_processing+0xcc>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	3b0a      	subs	r3, #10
 800095e:	2b03      	cmp	r3, #3
 8000960:	d81e      	bhi.n	80009a0 <fsm_for_input_processing+0x80>
 8000962:	a201      	add	r2, pc, #4	; (adr r2, 8000968 <fsm_for_input_processing+0x48>)
 8000964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000968:	080009a1 	.word	0x080009a1
 800096c:	08000979 	.word	0x08000979
 8000970:	08000985 	.word	0x08000985
 8000974:	08000991 	.word	0x08000991
			case MODE_AUTO:
				break;
			case MODE_RED:
				LED_RED_temp++;
 8000978:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <fsm_for_input_processing+0xd0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	3301      	adds	r3, #1
 800097e:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <fsm_for_input_processing+0xd0>)
 8000980:	6013      	str	r3, [r2, #0]
				break;
 8000982:	e00e      	b.n	80009a2 <fsm_for_input_processing+0x82>
			case MODE_YELLOW:
				duration_YELLOW_temp++;
 8000984:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <fsm_for_input_processing+0xd4>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	3301      	adds	r3, #1
 800098a:	4a1a      	ldr	r2, [pc, #104]	; (80009f4 <fsm_for_input_processing+0xd4>)
 800098c:	6013      	str	r3, [r2, #0]
				break;
 800098e:	e008      	b.n	80009a2 <fsm_for_input_processing+0x82>
			case MODE_GREEN:
				duration_GREEN_temp++;
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <fsm_for_input_processing+0xd8>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	3301      	adds	r3, #1
 8000996:	4a18      	ldr	r2, [pc, #96]	; (80009f8 <fsm_for_input_processing+0xd8>)
 8000998:	6013      	str	r3, [r2, #0]
				break;
 800099a:	e002      	b.n	80009a2 <fsm_for_input_processing+0x82>
			default:
				break;
		}
	}
 800099c:	bf00      	nop
 800099e:	e000      	b.n	80009a2 <fsm_for_input_processing+0x82>
				break;
 80009a0:	bf00      	nop
	if(is_button_pressed(2)){
 80009a2:	2002      	movs	r0, #2
 80009a4:	f000 f92e 	bl	8000c04 <is_button_pressed>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d019      	beq.n	80009e2 <fsm_for_input_processing+0xc2>
		duration_RED = LED_RED_temp;
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <fsm_for_input_processing+0xd0>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <fsm_for_input_processing+0xdc>)
 80009b4:	6013      	str	r3, [r2, #0]
		duration_YELLOW = duration_YELLOW_temp;
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <fsm_for_input_processing+0xd4>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a11      	ldr	r2, [pc, #68]	; (8000a00 <fsm_for_input_processing+0xe0>)
 80009bc:	6013      	str	r3, [r2, #0]
		duration_GREEN = duration_GREEN_temp;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <fsm_for_input_processing+0xd8>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <fsm_for_input_processing+0xe4>)
 80009c4:	6013      	str	r3, [r2, #0]
		TRAFFIC_MODE++;
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <fsm_for_input_processing+0xcc>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	3301      	adds	r3, #1
 80009cc:	4a07      	ldr	r2, [pc, #28]	; (80009ec <fsm_for_input_processing+0xcc>)
 80009ce:	6013      	str	r3, [r2, #0]
		if(TRAFFIC_MODE>MODE_GREEN) TRAFFIC_MODE = MODE_AUTO;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <fsm_for_input_processing+0xcc>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b0d      	cmp	r3, #13
 80009d6:	dd02      	ble.n	80009de <fsm_for_input_processing+0xbe>
 80009d8:	4b04      	ldr	r3, [pc, #16]	; (80009ec <fsm_for_input_processing+0xcc>)
 80009da:	220a      	movs	r2, #10
 80009dc:	601a      	str	r2, [r3, #0]
		fsm_reset();
 80009de:	f7ff fdcf 	bl	8000580 <fsm_reset>
	}
	fsm_run();
 80009e2:	f7ff fed7 	bl	8000794 <fsm_run>
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2000001c 	.word	0x2000001c
 80009f0:	2000002c 	.word	0x2000002c
 80009f4:	20000030 	.word	0x20000030
 80009f8:	20000034 	.word	0x20000034
 80009fc:	20000020 	.word	0x20000020
 8000a00:	20000024 	.word	0x20000024
 8000a04:	20000028 	.word	0x20000028

08000a08 <initButton>:
static uint8_t flagForButtonPress[N0_OF_BUTTONS];
static uint8_t flagForButtonLongPress[N0_OF_BUTTONS];
// we define counter for automatically decreasing.
static uint16_t counterForButtonLongPress[N0_OF_BUTTONS];

void initButton(){
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
    for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	e026      	b.n	8000a62 <initButton+0x5a>
        buttonBuffer0[i] = BUTTON_IS_RELEASED;
 8000a14:	4a17      	ldr	r2, [pc, #92]	; (8000a74 <initButton+0x6c>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	701a      	strb	r2, [r3, #0]
        buttonBuffer1[i] = BUTTON_IS_RELEASED;
 8000a1e:	4a16      	ldr	r2, [pc, #88]	; (8000a78 <initButton+0x70>)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4413      	add	r3, r2
 8000a24:	2201      	movs	r2, #1
 8000a26:	701a      	strb	r2, [r3, #0]
        buttonBuffer2[i] = BUTTON_IS_RELEASED;
 8000a28:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <initButton+0x74>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]
        buttonBuffer3[i] = BUTTON_IS_RELEASED;
 8000a32:	4a13      	ldr	r2, [pc, #76]	; (8000a80 <initButton+0x78>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4413      	add	r3, r2
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]

        flagForButtonLongPress[i] = 0;
 8000a3c:	4a11      	ldr	r2, [pc, #68]	; (8000a84 <initButton+0x7c>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
        flagForButtonPress[i] = 0;
 8000a46:	4a10      	ldr	r2, [pc, #64]	; (8000a88 <initButton+0x80>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
        counterForButtonLongPress[i] = DURATION_FOR_LONG_PRESS;
 8000a50:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <initButton+0x84>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000a58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	ddd5      	ble.n	8000a14 <initButton+0xc>
    }
}
 8000a68:	bf00      	nop
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	20000074 	.word	0x20000074
 8000a78:	20000078 	.word	0x20000078
 8000a7c:	2000007c 	.word	0x2000007c
 8000a80:	20000080 	.word	0x20000080
 8000a84:	20000088 	.word	0x20000088
 8000a88:	20000084 	.word	0x20000084
 8000a8c:	2000008c 	.word	0x2000008c

08000a90 <button_reading>:

void button_reading(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
    for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	e099      	b.n	8000bd0 <button_reading+0x140>
        buttonBuffer2[i] = buttonBuffer1[i];
 8000a9c:	4a51      	ldr	r2, [pc, #324]	; (8000be4 <button_reading+0x154>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	7819      	ldrb	r1, [r3, #0]
 8000aa4:	4a50      	ldr	r2, [pc, #320]	; (8000be8 <button_reading+0x158>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	460a      	mov	r2, r1
 8000aac:	701a      	strb	r2, [r3, #0]
        buttonBuffer1[i] = buttonBuffer0[i];
 8000aae:	4a4f      	ldr	r2, [pc, #316]	; (8000bec <button_reading+0x15c>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	7819      	ldrb	r1, [r3, #0]
 8000ab6:	4a4b      	ldr	r2, [pc, #300]	; (8000be4 <button_reading+0x154>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4413      	add	r3, r2
 8000abc:	460a      	mov	r2, r1
 8000abe:	701a      	strb	r2, [r3, #0]
        switch (i) {
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	d021      	beq.n	8000b0a <button_reading+0x7a>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	dc2a      	bgt.n	8000b22 <button_reading+0x92>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d003      	beq.n	8000ada <button_reading+0x4a>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d00c      	beq.n	8000af2 <button_reading+0x62>
 8000ad8:	e023      	b.n	8000b22 <button_reading+0x92>
            case 0:
                buttonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port, BUTTON_0_Pin);
 8000ada:	2101      	movs	r1, #1
 8000adc:	4844      	ldr	r0, [pc, #272]	; (8000bf0 <button_reading+0x160>)
 8000ade:	f000 fdc5 	bl	800166c <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4a41      	ldr	r2, [pc, #260]	; (8000bec <button_reading+0x15c>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4413      	add	r3, r2
 8000aec:	460a      	mov	r2, r1
 8000aee:	701a      	strb	r2, [r3, #0]
                break;
 8000af0:	e017      	b.n	8000b22 <button_reading+0x92>
            case 1:
                buttonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000af2:	2102      	movs	r1, #2
 8000af4:	483e      	ldr	r0, [pc, #248]	; (8000bf0 <button_reading+0x160>)
 8000af6:	f000 fdb9 	bl	800166c <HAL_GPIO_ReadPin>
 8000afa:	4603      	mov	r3, r0
 8000afc:	4619      	mov	r1, r3
 8000afe:	4a3b      	ldr	r2, [pc, #236]	; (8000bec <button_reading+0x15c>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4413      	add	r3, r2
 8000b04:	460a      	mov	r2, r1
 8000b06:	701a      	strb	r2, [r3, #0]
                break;
 8000b08:	e00b      	b.n	8000b22 <button_reading+0x92>
            case 2:
                buttonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000b0a:	2104      	movs	r1, #4
 8000b0c:	4838      	ldr	r0, [pc, #224]	; (8000bf0 <button_reading+0x160>)
 8000b0e:	f000 fdad 	bl	800166c <HAL_GPIO_ReadPin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	4619      	mov	r1, r3
 8000b16:	4a35      	ldr	r2, [pc, #212]	; (8000bec <button_reading+0x15c>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	460a      	mov	r2, r1
 8000b1e:	701a      	strb	r2, [r3, #0]
                break;
 8000b20:	bf00      	nop
        }
        if ((buttonBuffer1[i] == buttonBuffer0[i]) && (buttonBuffer1[i] == buttonBuffer2[i])) {
 8000b22:	4a30      	ldr	r2, [pc, #192]	; (8000be4 <button_reading+0x154>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4413      	add	r3, r2
 8000b28:	781a      	ldrb	r2, [r3, #0]
 8000b2a:	4930      	ldr	r1, [pc, #192]	; (8000bec <button_reading+0x15c>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	440b      	add	r3, r1
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d149      	bne.n	8000bca <button_reading+0x13a>
 8000b36:	4a2b      	ldr	r2, [pc, #172]	; (8000be4 <button_reading+0x154>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	781a      	ldrb	r2, [r3, #0]
 8000b3e:	492a      	ldr	r1, [pc, #168]	; (8000be8 <button_reading+0x158>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	440b      	add	r3, r1
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d13f      	bne.n	8000bca <button_reading+0x13a>
            if (buttonBuffer2[i] != buttonBuffer3[i]) {
 8000b4a:	4a27      	ldr	r2, [pc, #156]	; (8000be8 <button_reading+0x158>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4413      	add	r3, r2
 8000b50:	781a      	ldrb	r2, [r3, #0]
 8000b52:	4928      	ldr	r1, [pc, #160]	; (8000bf4 <button_reading+0x164>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	440b      	add	r3, r1
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d01a      	beq.n	8000b94 <button_reading+0x104>
                buttonBuffer3[i] = buttonBuffer2[i];
 8000b5e:	4a22      	ldr	r2, [pc, #136]	; (8000be8 <button_reading+0x158>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4413      	add	r3, r2
 8000b64:	7819      	ldrb	r1, [r3, #0]
 8000b66:	4a23      	ldr	r2, [pc, #140]	; (8000bf4 <button_reading+0x164>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	460a      	mov	r2, r1
 8000b6e:	701a      	strb	r2, [r3, #0]
                if (buttonBuffer3[i] == BUTTON_IS_PRESSED) {
 8000b70:	4a20      	ldr	r2, [pc, #128]	; (8000bf4 <button_reading+0x164>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d126      	bne.n	8000bca <button_reading+0x13a>
                    counterForButtonLongPress[i] = DURATION_FOR_LONG_PRESS;
 8000b7c:	4a1e      	ldr	r2, [pc, #120]	; (8000bf8 <button_reading+0x168>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000b84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    flagForButtonPress[i] = 1;
 8000b88:	4a1c      	ldr	r2, [pc, #112]	; (8000bfc <button_reading+0x16c>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
 8000b92:	e01a      	b.n	8000bca <button_reading+0x13a>
                }
            } else {
                counterForButtonLongPress[i]--;
 8000b94:	4a18      	ldr	r2, [pc, #96]	; (8000bf8 <button_reading+0x168>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	b299      	uxth	r1, r3
 8000ba0:	4a15      	ldr	r2, [pc, #84]	; (8000bf8 <button_reading+0x168>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if (counterForButtonLongPress[i] == 0) {
 8000ba8:	4a13      	ldr	r2, [pc, #76]	; (8000bf8 <button_reading+0x168>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d10a      	bne.n	8000bca <button_reading+0x13a>
                    counterForButtonLongPress[i] = DURATION_FOR_LONG_PRESS;
 8000bb4:	4a10      	ldr	r2, [pc, #64]	; (8000bf8 <button_reading+0x168>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000bbc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    flagForButtonLongPress[i] = 1;
 8000bc0:	4a0f      	ldr	r2, [pc, #60]	; (8000c00 <button_reading+0x170>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	f77f af62 	ble.w	8000a9c <button_reading+0xc>
                }
            }
        }
    }
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000078 	.word	0x20000078
 8000be8:	2000007c 	.word	0x2000007c
 8000bec:	20000074 	.word	0x20000074
 8000bf0:	40010c00 	.word	0x40010c00
 8000bf4:	20000080 	.word	0x20000080
 8000bf8:	2000008c 	.word	0x2000008c
 8000bfc:	20000084 	.word	0x20000084
 8000c00:	20000088 	.word	0x20000088

08000c04 <is_button_pressed>:

//Checking a button is pressed or not
unsigned char is_button_pressed ( uint8_t index ){
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
    if( index >= N0_OF_BUTTONS ) return 0;
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d901      	bls.n	8000c18 <is_button_pressed+0x14>
 8000c14:	2300      	movs	r3, #0
 8000c16:	e00b      	b.n	8000c30 <is_button_pressed+0x2c>
    if(flagForButtonPress[index] == 1){
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <is_button_pressed+0x38>)
 8000c1c:	5cd3      	ldrb	r3, [r2, r3]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d105      	bne.n	8000c2e <is_button_pressed+0x2a>
    	flagForButtonPress[index] = 0;
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <is_button_pressed+0x38>)
 8000c26:	2100      	movs	r1, #0
 8000c28:	54d1      	strb	r1, [r2, r3]
    	return 1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e000      	b.n	8000c30 <is_button_pressed+0x2c>
    }
    return 0;
 8000c2e:	2300      	movs	r3, #0
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000084 	.word	0x20000084

08000c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c44:	f000 fa26 	bl	8001094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c48:	f000 f818 	bl	8000c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4c:	f000 f89e 	bl	8000d8c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c50:	f000 f850 	bl	8000cf4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2 );
 8000c54:	4808      	ldr	r0, [pc, #32]	; (8000c78 <main+0x38>)
 8000c56:	f001 f989 	bl	8001f6c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initButton();
 8000c5a:	f7ff fed5 	bl	8000a08 <initButton>
  initTimer(1000);
 8000c5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c62:	f000 f94b 	bl	8000efc <initTimer>
  setTimer(2000,0);
 8000c66:	2100      	movs	r1, #0
 8000c68:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c6c:	f000 f8f6 	bl	8000e5c <setTimer>
  while (1)
  {
	  fsm_for_input_processing();
 8000c70:	f7ff fe56 	bl	8000920 <fsm_for_input_processing>
 8000c74:	e7fc      	b.n	8000c70 <main+0x30>
 8000c76:	bf00      	nop
 8000c78:	20000094 	.word	0x20000094

08000c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b090      	sub	sp, #64	; 0x40
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c82:	f107 0318 	add.w	r3, r7, #24
 8000c86:	2228      	movs	r2, #40	; 0x28
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 fd26 	bl	80026dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca6:	2310      	movs	r3, #16
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cae:	f107 0318 	add.w	r3, r7, #24
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 fd22 	bl	80016fc <HAL_RCC_OscConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cbe:	f000 f8c7 	bl	8000e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc2:	230f      	movs	r3, #15
 8000cc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 ff90 	bl	8001c00 <HAL_RCC_ClockConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ce6:	f000 f8b3 	bl	8000e50 <Error_Handler>
  }
}
 8000cea:	bf00      	nop
 8000cec:	3740      	adds	r7, #64	; 0x40
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d08:	463b      	mov	r3, r7
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <MX_TIM2_Init+0x94>)
 8000d12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <MX_TIM2_Init+0x94>)
 8000d1a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <MX_TIM2_Init+0x94>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <MX_TIM2_Init+0x94>)
 8000d28:	2209      	movs	r2, #9
 8000d2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <MX_TIM2_Init+0x94>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <MX_TIM2_Init+0x94>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d38:	4813      	ldr	r0, [pc, #76]	; (8000d88 <MX_TIM2_Init+0x94>)
 8000d3a:	f001 f8c7 	bl	8001ecc <HAL_TIM_Base_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d44:	f000 f884 	bl	8000e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d4e:	f107 0308 	add.w	r3, r7, #8
 8000d52:	4619      	mov	r1, r3
 8000d54:	480c      	ldr	r0, [pc, #48]	; (8000d88 <MX_TIM2_Init+0x94>)
 8000d56:	f001 fa5d 	bl	8002214 <HAL_TIM_ConfigClockSource>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d60:	f000 f876 	bl	8000e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d64:	2300      	movs	r3, #0
 8000d66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	; (8000d88 <MX_TIM2_Init+0x94>)
 8000d72:	f001 fc25 	bl	80025c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d7c:	f000 f868 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000094 	.word	0x20000094

08000d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da0:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <MX_GPIO_Init+0xb8>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a27      	ldr	r2, [pc, #156]	; (8000e44 <MX_GPIO_Init+0xb8>)
 8000da6:	f043 0304 	orr.w	r3, r3, #4
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <MX_GPIO_Init+0xb8>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db8:	4b22      	ldr	r3, [pc, #136]	; (8000e44 <MX_GPIO_Init+0xb8>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a21      	ldr	r2, [pc, #132]	; (8000e44 <MX_GPIO_Init+0xb8>)
 8000dbe:	f043 0308 	orr.w	r3, r3, #8
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <MX_GPIO_Init+0xb8>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f003 0308 	and.w	r3, r3, #8
 8000dcc:	603b      	str	r3, [r7, #0]
 8000dce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f64f 613f 	movw	r1, #65087	; 0xfe3f
 8000dd6:	481c      	ldr	r0, [pc, #112]	; (8000e48 <MX_GPIO_Init+0xbc>)
 8000dd8:	f000 fc5f 	bl	800169a <HAL_GPIO_WritePin>
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|SEG0_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOGGLE_LED_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f248 0178 	movw	r1, #32888	; 0x8078
 8000de2:	481a      	ldr	r0, [pc, #104]	; (8000e4c <MX_GPIO_Init+0xc0>)
 8000de4:	f000 fc59 	bl	800169a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_YELLOW2_Pin LED_GREEN2_Pin SEG0_Pin SEG1_Pin
                           SEG2_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8000de8:	f64f 633f 	movw	r3, #65087	; 0xfe3f
 8000dec:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|SEG0_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2302      	movs	r3, #2
 8000df8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4811      	ldr	r0, [pc, #68]	; (8000e48 <MX_GPIO_Init+0xbc>)
 8000e02:	f000 fab7 	bl	8001374 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_0_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8000e06:	2307      	movs	r3, #7
 8000e08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e12:	f107 0308 	add.w	r3, r7, #8
 8000e16:	4619      	mov	r1, r3
 8000e18:	480c      	ldr	r0, [pc, #48]	; (8000e4c <MX_GPIO_Init+0xc0>)
 8000e1a:	f000 faab 	bl	8001374 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOGGLE_LED_Pin EN0_Pin EN1_Pin EN2_Pin
                           EN3_Pin */
  GPIO_InitStruct.Pin = TOGGLE_LED_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 8000e1e:	f248 0378 	movw	r3, #32888	; 0x8078
 8000e22:	60bb      	str	r3, [r7, #8]
                          |EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e30:	f107 0308 	add.w	r3, r7, #8
 8000e34:	4619      	mov	r1, r3
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_GPIO_Init+0xc0>)
 8000e38:	f000 fa9c 	bl	8001374 <HAL_GPIO_Init>

}
 8000e3c:	bf00      	nop
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40010800 	.word	0x40010800
 8000e4c:	40010c00 	.word	0x40010c00

08000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
}
 8000e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <Error_Handler+0x8>
	...

08000e5c <setTimer>:
#include "software_timer.h"

int timer_counter[NO_OF_TIMER];
int timer_flag[NO_OF_TIMER];

void setTimer(int duration, int ID){
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
	timer_counter[ID] = duration/TICK;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a09      	ldr	r2, [pc, #36]	; (8000e90 <setTimer+0x34>)
 8000e6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e6e:	1092      	asrs	r2, r2, #2
 8000e70:	17db      	asrs	r3, r3, #31
 8000e72:	1ad2      	subs	r2, r2, r3
 8000e74:	4907      	ldr	r1, [pc, #28]	; (8000e94 <setTimer+0x38>)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[ID] = 0;
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <setTimer+0x3c>)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	2100      	movs	r1, #0
 8000e82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	66666667 	.word	0x66666667
 8000e94:	200000dc 	.word	0x200000dc
 8000e98:	200000e8 	.word	0x200000e8

08000e9c <timerRun>:

void timerRun(){
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
	for(int i = 0; i<NO_OF_TIMER; i++){
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	e01c      	b.n	8000ee2 <timerRun+0x46>
		if(timer_counter[i] > 0){
 8000ea8:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <timerRun+0x58>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	dd13      	ble.n	8000edc <timerRun+0x40>
			timer_counter[i]--;
 8000eb4:	4a0f      	ldr	r2, [pc, #60]	; (8000ef4 <timerRun+0x58>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebc:	1e5a      	subs	r2, r3, #1
 8000ebe:	490d      	ldr	r1, [pc, #52]	; (8000ef4 <timerRun+0x58>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 8000ec6:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <timerRun+0x58>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	dc04      	bgt.n	8000edc <timerRun+0x40>
				timer_flag[i] = 1;
 8000ed2:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <timerRun+0x5c>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<NO_OF_TIMER; i++){
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	dddf      	ble.n	8000ea8 <timerRun+0xc>
			}
		}
	}
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	200000dc 	.word	0x200000dc
 8000ef8:	200000e8 	.word	0x200000e8

08000efc <initTimer>:

void initTimer(int delay){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<NO_OF_TIMER; i++){
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	e006      	b.n	8000f18 <initTimer+0x1c>
		setTimer(delay, i);
 8000f0a:	68f9      	ldr	r1, [r7, #12]
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff ffa5 	bl	8000e5c <setTimer>
	for(int i = 0; i<NO_OF_TIMER; i++){
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3301      	adds	r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	ddf5      	ble.n	8000f0a <initTimer+0xe>
	}
}
 8000f1e:	bf00      	nop
 8000f20:	bf00      	nop
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_MspInit+0x40>)
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <HAL_MspInit+0x40>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6193      	str	r3, [r2, #24]
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_MspInit+0x40>)
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_MspInit+0x40>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_MspInit+0x40>)
 8000f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f50:	61d3      	str	r3, [r2, #28]
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <HAL_MspInit+0x40>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f7c:	d113      	bne.n	8000fa6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <HAL_TIM_Base_MspInit+0x44>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <HAL_TIM_Base_MspInit+0x44>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	61d3      	str	r3, [r2, #28]
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_TIM_Base_MspInit+0x44>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	201c      	movs	r0, #28
 8000f9c:	f000 f9b3 	bl	8001306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fa0:	201c      	movs	r0, #28
 8000fa2:	f000 f9cc 	bl	800133e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <NMI_Handler+0x4>

08000fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <HardFault_Handler+0x4>

08000fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <MemManage_Handler+0x4>

08000fc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <BusFault_Handler+0x4>

08000fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <UsageFault_Handler+0x4>

08000fd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr

08000fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr

08000fea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr

08000ff6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ffa:	f000 f891 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <TIM2_IRQHandler+0x10>)
 800100a:	f000 fffb 	bl	8002004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000094 	.word	0x20000094

08001018 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <HAL_TIM_PeriodElapsedCallback>:
 */

# include "global.h"

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	if ( htim -> Instance == TIM2 ) {
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001034:	d103      	bne.n	800103e <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading() ;
 8001036:	f7ff fd2b 	bl	8000a90 <button_reading>
		timerRun();
 800103a:	f7ff ff2f 	bl	8000e9c <timerRun>
	}

}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001048:	480c      	ldr	r0, [pc, #48]	; (800107c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800104a:	490d      	ldr	r1, [pc, #52]	; (8001080 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800104c:	4a0d      	ldr	r2, [pc, #52]	; (8001084 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001050:	e002      	b.n	8001058 <LoopCopyDataInit>

08001052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001056:	3304      	adds	r3, #4

08001058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800105c:	d3f9      	bcc.n	8001052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001060:	4c0a      	ldr	r4, [pc, #40]	; (800108c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001064:	e001      	b.n	800106a <LoopFillZerobss>

08001066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001068:	3204      	adds	r2, #4

0800106a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800106c:	d3fb      	bcc.n	8001066 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800106e:	f7ff ffd3 	bl	8001018 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001072:	f001 fb0f 	bl	8002694 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001076:	f7ff fde3 	bl	8000c40 <main>
  bx lr
 800107a:	4770      	bx	lr
  ldr r0, =_sdata
 800107c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001080:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8001084:	0800272c 	.word	0x0800272c
  ldr r2, =_sbss
 8001088:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 800108c:	200000f8 	.word	0x200000f8

08001090 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001090:	e7fe      	b.n	8001090 <ADC1_2_IRQHandler>
	...

08001094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_Init+0x28>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a07      	ldr	r2, [pc, #28]	; (80010bc <HAL_Init+0x28>)
 800109e:	f043 0310 	orr.w	r3, r3, #16
 80010a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 f923 	bl	80012f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010aa:	200f      	movs	r0, #15
 80010ac:	f000 f808 	bl	80010c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b0:	f7ff ff3a 	bl	8000f28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40022000 	.word	0x40022000

080010c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_InitTick+0x54>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_InitTick+0x58>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010da:	fbb2 f3f3 	udiv	r3, r2, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f93b 	bl	800135a <HAL_SYSTICK_Config>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00e      	b.n	800110c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	d80a      	bhi.n	800110a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f4:	2200      	movs	r2, #0
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f000 f903 	bl	8001306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001100:	4a06      	ldr	r2, [pc, #24]	; (800111c <HAL_InitTick+0x5c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	e000      	b.n	800110c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000038 	.word	0x20000038
 8001118:	20000040 	.word	0x20000040
 800111c:	2000003c 	.word	0x2000003c

08001120 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <HAL_IncTick+0x1c>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b05      	ldr	r3, [pc, #20]	; (8001140 <HAL_IncTick+0x20>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a03      	ldr	r2, [pc, #12]	; (8001140 <HAL_IncTick+0x20>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	20000040 	.word	0x20000040
 8001140:	200000f4 	.word	0x200000f4

08001144 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return uwTick;
 8001148:	4b02      	ldr	r3, [pc, #8]	; (8001154 <HAL_GetTick+0x10>)
 800114a:	681b      	ldr	r3, [r3, #0]
}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	200000f4 	.word	0x200000f4

08001158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001174:	4013      	ands	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118a:	4a04      	ldr	r2, [pc, #16]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	60d3      	str	r3, [r2, #12]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <__NVIC_GetPriorityGrouping+0x18>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	f003 0307 	and.w	r3, r3, #7
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	db0b      	blt.n	80011e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	f003 021f 	and.w	r2, r3, #31
 80011d4:	4906      	ldr	r1, [pc, #24]	; (80011f0 <__NVIC_EnableIRQ+0x34>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	095b      	lsrs	r3, r3, #5
 80011dc:	2001      	movs	r0, #1
 80011de:	fa00 f202 	lsl.w	r2, r0, r2
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	e000e100 	.word	0xe000e100

080011f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	db0a      	blt.n	800121e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	490c      	ldr	r1, [pc, #48]	; (8001240 <__NVIC_SetPriority+0x4c>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	0112      	lsls	r2, r2, #4
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	440b      	add	r3, r1
 8001218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800121c:	e00a      	b.n	8001234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4908      	ldr	r1, [pc, #32]	; (8001244 <__NVIC_SetPriority+0x50>)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	3b04      	subs	r3, #4
 800122c:	0112      	lsls	r2, r2, #4
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	440b      	add	r3, r1
 8001232:	761a      	strb	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000e100 	.word	0xe000e100
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f1c3 0307 	rsb	r3, r3, #7
 8001262:	2b04      	cmp	r3, #4
 8001264:	bf28      	it	cs
 8001266:	2304      	movcs	r3, #4
 8001268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3304      	adds	r3, #4
 800126e:	2b06      	cmp	r3, #6
 8001270:	d902      	bls.n	8001278 <NVIC_EncodePriority+0x30>
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3b03      	subs	r3, #3
 8001276:	e000      	b.n	800127a <NVIC_EncodePriority+0x32>
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	f04f 32ff 	mov.w	r2, #4294967295
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43da      	mvns	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	401a      	ands	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001290:	f04f 31ff 	mov.w	r1, #4294967295
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa01 f303 	lsl.w	r3, r1, r3
 800129a:	43d9      	mvns	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	4313      	orrs	r3, r2
         );
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3724      	adds	r7, #36	; 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012bc:	d301      	bcc.n	80012c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012be:	2301      	movs	r3, #1
 80012c0:	e00f      	b.n	80012e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c2:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <SysTick_Config+0x40>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ca:	210f      	movs	r1, #15
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295
 80012d0:	f7ff ff90 	bl	80011f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <SysTick_Config+0x40>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012da:	4b04      	ldr	r3, [pc, #16]	; (80012ec <SysTick_Config+0x40>)
 80012dc:	2207      	movs	r2, #7
 80012de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	e000e010 	.word	0xe000e010

080012f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff2d 	bl	8001158 <__NVIC_SetPriorityGrouping>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001306:	b580      	push	{r7, lr}
 8001308:	b086      	sub	sp, #24
 800130a:	af00      	add	r7, sp, #0
 800130c:	4603      	mov	r3, r0
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001318:	f7ff ff42 	bl	80011a0 <__NVIC_GetPriorityGrouping>
 800131c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	6978      	ldr	r0, [r7, #20]
 8001324:	f7ff ff90 	bl	8001248 <NVIC_EncodePriority>
 8001328:	4602      	mov	r2, r0
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff5f 	bl	80011f4 <__NVIC_SetPriority>
}
 8001336:	bf00      	nop
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff35 	bl	80011bc <__NVIC_EnableIRQ>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ffa2 	bl	80012ac <SysTick_Config>
 8001368:	4603      	mov	r3, r0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001374:	b480      	push	{r7}
 8001376:	b08b      	sub	sp, #44	; 0x2c
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800137e:	2300      	movs	r3, #0
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001382:	2300      	movs	r3, #0
 8001384:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001386:	e161      	b.n	800164c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001388:	2201      	movs	r2, #1
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	f040 8150 	bne.w	8001646 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	4a97      	ldr	r2, [pc, #604]	; (8001608 <HAL_GPIO_Init+0x294>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d05e      	beq.n	800146e <HAL_GPIO_Init+0xfa>
 80013b0:	4a95      	ldr	r2, [pc, #596]	; (8001608 <HAL_GPIO_Init+0x294>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d875      	bhi.n	80014a2 <HAL_GPIO_Init+0x12e>
 80013b6:	4a95      	ldr	r2, [pc, #596]	; (800160c <HAL_GPIO_Init+0x298>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d058      	beq.n	800146e <HAL_GPIO_Init+0xfa>
 80013bc:	4a93      	ldr	r2, [pc, #588]	; (800160c <HAL_GPIO_Init+0x298>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d86f      	bhi.n	80014a2 <HAL_GPIO_Init+0x12e>
 80013c2:	4a93      	ldr	r2, [pc, #588]	; (8001610 <HAL_GPIO_Init+0x29c>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d052      	beq.n	800146e <HAL_GPIO_Init+0xfa>
 80013c8:	4a91      	ldr	r2, [pc, #580]	; (8001610 <HAL_GPIO_Init+0x29c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d869      	bhi.n	80014a2 <HAL_GPIO_Init+0x12e>
 80013ce:	4a91      	ldr	r2, [pc, #580]	; (8001614 <HAL_GPIO_Init+0x2a0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d04c      	beq.n	800146e <HAL_GPIO_Init+0xfa>
 80013d4:	4a8f      	ldr	r2, [pc, #572]	; (8001614 <HAL_GPIO_Init+0x2a0>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d863      	bhi.n	80014a2 <HAL_GPIO_Init+0x12e>
 80013da:	4a8f      	ldr	r2, [pc, #572]	; (8001618 <HAL_GPIO_Init+0x2a4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d046      	beq.n	800146e <HAL_GPIO_Init+0xfa>
 80013e0:	4a8d      	ldr	r2, [pc, #564]	; (8001618 <HAL_GPIO_Init+0x2a4>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d85d      	bhi.n	80014a2 <HAL_GPIO_Init+0x12e>
 80013e6:	2b12      	cmp	r3, #18
 80013e8:	d82a      	bhi.n	8001440 <HAL_GPIO_Init+0xcc>
 80013ea:	2b12      	cmp	r3, #18
 80013ec:	d859      	bhi.n	80014a2 <HAL_GPIO_Init+0x12e>
 80013ee:	a201      	add	r2, pc, #4	; (adr r2, 80013f4 <HAL_GPIO_Init+0x80>)
 80013f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f4:	0800146f 	.word	0x0800146f
 80013f8:	08001449 	.word	0x08001449
 80013fc:	0800145b 	.word	0x0800145b
 8001400:	0800149d 	.word	0x0800149d
 8001404:	080014a3 	.word	0x080014a3
 8001408:	080014a3 	.word	0x080014a3
 800140c:	080014a3 	.word	0x080014a3
 8001410:	080014a3 	.word	0x080014a3
 8001414:	080014a3 	.word	0x080014a3
 8001418:	080014a3 	.word	0x080014a3
 800141c:	080014a3 	.word	0x080014a3
 8001420:	080014a3 	.word	0x080014a3
 8001424:	080014a3 	.word	0x080014a3
 8001428:	080014a3 	.word	0x080014a3
 800142c:	080014a3 	.word	0x080014a3
 8001430:	080014a3 	.word	0x080014a3
 8001434:	080014a3 	.word	0x080014a3
 8001438:	08001451 	.word	0x08001451
 800143c:	08001465 	.word	0x08001465
 8001440:	4a76      	ldr	r2, [pc, #472]	; (800161c <HAL_GPIO_Init+0x2a8>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d013      	beq.n	800146e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001446:	e02c      	b.n	80014a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	623b      	str	r3, [r7, #32]
          break;
 800144e:	e029      	b.n	80014a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	3304      	adds	r3, #4
 8001456:	623b      	str	r3, [r7, #32]
          break;
 8001458:	e024      	b.n	80014a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	3308      	adds	r3, #8
 8001460:	623b      	str	r3, [r7, #32]
          break;
 8001462:	e01f      	b.n	80014a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	330c      	adds	r3, #12
 800146a:	623b      	str	r3, [r7, #32]
          break;
 800146c:	e01a      	b.n	80014a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d102      	bne.n	800147c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001476:	2304      	movs	r3, #4
 8001478:	623b      	str	r3, [r7, #32]
          break;
 800147a:	e013      	b.n	80014a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d105      	bne.n	8001490 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001484:	2308      	movs	r3, #8
 8001486:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69fa      	ldr	r2, [r7, #28]
 800148c:	611a      	str	r2, [r3, #16]
          break;
 800148e:	e009      	b.n	80014a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001490:	2308      	movs	r3, #8
 8001492:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69fa      	ldr	r2, [r7, #28]
 8001498:	615a      	str	r2, [r3, #20]
          break;
 800149a:	e003      	b.n	80014a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800149c:	2300      	movs	r3, #0
 800149e:	623b      	str	r3, [r7, #32]
          break;
 80014a0:	e000      	b.n	80014a4 <HAL_GPIO_Init+0x130>
          break;
 80014a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	2bff      	cmp	r3, #255	; 0xff
 80014a8:	d801      	bhi.n	80014ae <HAL_GPIO_Init+0x13a>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	e001      	b.n	80014b2 <HAL_GPIO_Init+0x13e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3304      	adds	r3, #4
 80014b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2bff      	cmp	r3, #255	; 0xff
 80014b8:	d802      	bhi.n	80014c0 <HAL_GPIO_Init+0x14c>
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	e002      	b.n	80014c6 <HAL_GPIO_Init+0x152>
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	3b08      	subs	r3, #8
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	210f      	movs	r1, #15
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	fa01 f303 	lsl.w	r3, r1, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	401a      	ands	r2, r3
 80014d8:	6a39      	ldr	r1, [r7, #32]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	fa01 f303 	lsl.w	r3, r1, r3
 80014e0:	431a      	orrs	r2, r3
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 80a9 	beq.w	8001646 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014f4:	4b4a      	ldr	r3, [pc, #296]	; (8001620 <HAL_GPIO_Init+0x2ac>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	4a49      	ldr	r2, [pc, #292]	; (8001620 <HAL_GPIO_Init+0x2ac>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	6193      	str	r3, [r2, #24]
 8001500:	4b47      	ldr	r3, [pc, #284]	; (8001620 <HAL_GPIO_Init+0x2ac>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800150c:	4a45      	ldr	r2, [pc, #276]	; (8001624 <HAL_GPIO_Init+0x2b0>)
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	3302      	adds	r3, #2
 8001514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001518:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	220f      	movs	r2, #15
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	4013      	ands	r3, r2
 800152e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a3d      	ldr	r2, [pc, #244]	; (8001628 <HAL_GPIO_Init+0x2b4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d00d      	beq.n	8001554 <HAL_GPIO_Init+0x1e0>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a3c      	ldr	r2, [pc, #240]	; (800162c <HAL_GPIO_Init+0x2b8>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d007      	beq.n	8001550 <HAL_GPIO_Init+0x1dc>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a3b      	ldr	r2, [pc, #236]	; (8001630 <HAL_GPIO_Init+0x2bc>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d101      	bne.n	800154c <HAL_GPIO_Init+0x1d8>
 8001548:	2302      	movs	r3, #2
 800154a:	e004      	b.n	8001556 <HAL_GPIO_Init+0x1e2>
 800154c:	2303      	movs	r3, #3
 800154e:	e002      	b.n	8001556 <HAL_GPIO_Init+0x1e2>
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <HAL_GPIO_Init+0x1e2>
 8001554:	2300      	movs	r3, #0
 8001556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001558:	f002 0203 	and.w	r2, r2, #3
 800155c:	0092      	lsls	r2, r2, #2
 800155e:	4093      	lsls	r3, r2
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001566:	492f      	ldr	r1, [pc, #188]	; (8001624 <HAL_GPIO_Init+0x2b0>)
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	3302      	adds	r3, #2
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d006      	beq.n	800158e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001580:	4b2c      	ldr	r3, [pc, #176]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	492b      	ldr	r1, [pc, #172]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	4313      	orrs	r3, r2
 800158a:	600b      	str	r3, [r1, #0]
 800158c:	e006      	b.n	800159c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800158e:	4b29      	ldr	r3, [pc, #164]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	43db      	mvns	r3, r3
 8001596:	4927      	ldr	r1, [pc, #156]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 8001598:	4013      	ands	r3, r2
 800159a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d006      	beq.n	80015b6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015a8:	4b22      	ldr	r3, [pc, #136]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	4921      	ldr	r1, [pc, #132]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
 80015b4:	e006      	b.n	80015c4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015b6:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	43db      	mvns	r3, r3
 80015be:	491d      	ldr	r1, [pc, #116]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d006      	beq.n	80015de <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	4917      	ldr	r1, [pc, #92]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	4313      	orrs	r3, r2
 80015da:	608b      	str	r3, [r1, #8]
 80015dc:	e006      	b.n	80015ec <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	4913      	ldr	r1, [pc, #76]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d01f      	beq.n	8001638 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015f8:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 80015fa:	68da      	ldr	r2, [r3, #12]
 80015fc:	490d      	ldr	r1, [pc, #52]	; (8001634 <HAL_GPIO_Init+0x2c0>)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	60cb      	str	r3, [r1, #12]
 8001604:	e01f      	b.n	8001646 <HAL_GPIO_Init+0x2d2>
 8001606:	bf00      	nop
 8001608:	10320000 	.word	0x10320000
 800160c:	10310000 	.word	0x10310000
 8001610:	10220000 	.word	0x10220000
 8001614:	10210000 	.word	0x10210000
 8001618:	10120000 	.word	0x10120000
 800161c:	10110000 	.word	0x10110000
 8001620:	40021000 	.word	0x40021000
 8001624:	40010000 	.word	0x40010000
 8001628:	40010800 	.word	0x40010800
 800162c:	40010c00 	.word	0x40010c00
 8001630:	40011000 	.word	0x40011000
 8001634:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_GPIO_Init+0x2f4>)
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	43db      	mvns	r3, r3
 8001640:	4909      	ldr	r1, [pc, #36]	; (8001668 <HAL_GPIO_Init+0x2f4>)
 8001642:	4013      	ands	r3, r2
 8001644:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	3301      	adds	r3, #1
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	fa22 f303 	lsr.w	r3, r2, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	f47f ae96 	bne.w	8001388 <HAL_GPIO_Init+0x14>
  }
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	372c      	adds	r7, #44	; 0x2c
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	40010400 	.word	0x40010400

0800166c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	887b      	ldrh	r3, [r7, #2]
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001684:	2301      	movs	r3, #1
 8001686:	73fb      	strb	r3, [r7, #15]
 8001688:	e001      	b.n	800168e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800168a:	2300      	movs	r3, #0
 800168c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800168e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr

0800169a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	460b      	mov	r3, r1
 80016a4:	807b      	strh	r3, [r7, #2]
 80016a6:	4613      	mov	r3, r2
 80016a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016aa:	787b      	ldrb	r3, [r7, #1]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016b0:	887a      	ldrh	r2, [r7, #2]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016b6:	e003      	b.n	80016c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016b8:	887b      	ldrh	r3, [r7, #2]
 80016ba:	041a      	lsls	r2, r3, #16
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	611a      	str	r2, [r3, #16]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b085      	sub	sp, #20
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	460b      	mov	r3, r1
 80016d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016dc:	887a      	ldrh	r2, [r7, #2]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4013      	ands	r3, r2
 80016e2:	041a      	lsls	r2, r3, #16
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	43d9      	mvns	r1, r3
 80016e8:	887b      	ldrh	r3, [r7, #2]
 80016ea:	400b      	ands	r3, r1
 80016ec:	431a      	orrs	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	611a      	str	r2, [r3, #16]
}
 80016f2:	bf00      	nop
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e272      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 8087 	beq.w	800182a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800171c:	4b92      	ldr	r3, [pc, #584]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 030c 	and.w	r3, r3, #12
 8001724:	2b04      	cmp	r3, #4
 8001726:	d00c      	beq.n	8001742 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001728:	4b8f      	ldr	r3, [pc, #572]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	2b08      	cmp	r3, #8
 8001732:	d112      	bne.n	800175a <HAL_RCC_OscConfig+0x5e>
 8001734:	4b8c      	ldr	r3, [pc, #560]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001740:	d10b      	bne.n	800175a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001742:	4b89      	ldr	r3, [pc, #548]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d06c      	beq.n	8001828 <HAL_RCC_OscConfig+0x12c>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d168      	bne.n	8001828 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e24c      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001762:	d106      	bne.n	8001772 <HAL_RCC_OscConfig+0x76>
 8001764:	4b80      	ldr	r3, [pc, #512]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a7f      	ldr	r2, [pc, #508]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800176a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	e02e      	b.n	80017d0 <HAL_RCC_OscConfig+0xd4>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0x98>
 800177a:	4b7b      	ldr	r3, [pc, #492]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a7a      	ldr	r2, [pc, #488]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b78      	ldr	r3, [pc, #480]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a77      	ldr	r2, [pc, #476]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800178c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e01d      	b.n	80017d0 <HAL_RCC_OscConfig+0xd4>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800179c:	d10c      	bne.n	80017b8 <HAL_RCC_OscConfig+0xbc>
 800179e:	4b72      	ldr	r3, [pc, #456]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a71      	ldr	r2, [pc, #452]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	4b6f      	ldr	r3, [pc, #444]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a6e      	ldr	r2, [pc, #440]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e00b      	b.n	80017d0 <HAL_RCC_OscConfig+0xd4>
 80017b8:	4b6b      	ldr	r3, [pc, #428]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a6a      	ldr	r2, [pc, #424]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b68      	ldr	r3, [pc, #416]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a67      	ldr	r2, [pc, #412]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d013      	beq.n	8001800 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff fcb4 	bl	8001144 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e0:	f7ff fcb0 	bl	8001144 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b64      	cmp	r3, #100	; 0x64
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e200      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	4b5d      	ldr	r3, [pc, #372]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0xe4>
 80017fe:	e014      	b.n	800182a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff fca0 	bl	8001144 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001808:	f7ff fc9c 	bl	8001144 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	; 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e1ec      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181a:	4b53      	ldr	r3, [pc, #332]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x10c>
 8001826:	e000      	b.n	800182a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d063      	beq.n	80018fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001836:	4b4c      	ldr	r3, [pc, #304]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00b      	beq.n	800185a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001842:	4b49      	ldr	r3, [pc, #292]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b08      	cmp	r3, #8
 800184c:	d11c      	bne.n	8001888 <HAL_RCC_OscConfig+0x18c>
 800184e:	4b46      	ldr	r3, [pc, #280]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d116      	bne.n	8001888 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185a:	4b43      	ldr	r3, [pc, #268]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <HAL_RCC_OscConfig+0x176>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d001      	beq.n	8001872 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e1c0      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001872:	4b3d      	ldr	r3, [pc, #244]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	4939      	ldr	r1, [pc, #228]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001886:	e03a      	b.n	80018fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d020      	beq.n	80018d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001890:	4b36      	ldr	r3, [pc, #216]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001892:	2201      	movs	r2, #1
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001896:	f7ff fc55 	bl	8001144 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189e:	f7ff fc51 	bl	8001144 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e1a1      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b0:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018bc:	4b2a      	ldr	r3, [pc, #168]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4927      	ldr	r1, [pc, #156]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
 80018d0:	e015      	b.n	80018fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d2:	4b26      	ldr	r3, [pc, #152]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7ff fc34 	bl	8001144 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e0:	f7ff fc30 	bl	8001144 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e180      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f2:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d03a      	beq.n	8001980 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d019      	beq.n	8001946 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001912:	4b17      	ldr	r3, [pc, #92]	; (8001970 <HAL_RCC_OscConfig+0x274>)
 8001914:	2201      	movs	r2, #1
 8001916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001918:	f7ff fc14 	bl	8001144 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001920:	f7ff fc10 	bl	8001144 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e160      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800193e:	2001      	movs	r0, #1
 8001940:	f000 faa6 	bl	8001e90 <RCC_Delay>
 8001944:	e01c      	b.n	8001980 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_RCC_OscConfig+0x274>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194c:	f7ff fbfa 	bl	8001144 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001952:	e00f      	b.n	8001974 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001954:	f7ff fbf6 	bl	8001144 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d908      	bls.n	8001974 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e146      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000
 800196c:	42420000 	.word	0x42420000
 8001970:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001974:	4b92      	ldr	r3, [pc, #584]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1e9      	bne.n	8001954 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80a6 	beq.w	8001ada <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001992:	4b8b      	ldr	r3, [pc, #556]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10d      	bne.n	80019ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	4b88      	ldr	r3, [pc, #544]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	4a87      	ldr	r2, [pc, #540]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a8:	61d3      	str	r3, [r2, #28]
 80019aa:	4b85      	ldr	r3, [pc, #532]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b6:	2301      	movs	r3, #1
 80019b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ba:	4b82      	ldr	r3, [pc, #520]	; (8001bc4 <HAL_RCC_OscConfig+0x4c8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d118      	bne.n	80019f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c6:	4b7f      	ldr	r3, [pc, #508]	; (8001bc4 <HAL_RCC_OscConfig+0x4c8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a7e      	ldr	r2, [pc, #504]	; (8001bc4 <HAL_RCC_OscConfig+0x4c8>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d2:	f7ff fbb7 	bl	8001144 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019da:	f7ff fbb3 	bl	8001144 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b64      	cmp	r3, #100	; 0x64
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e103      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ec:	4b75      	ldr	r3, [pc, #468]	; (8001bc4 <HAL_RCC_OscConfig+0x4c8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x312>
 8001a00:	4b6f      	ldr	r3, [pc, #444]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	4a6e      	ldr	r2, [pc, #440]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6213      	str	r3, [r2, #32]
 8001a0c:	e02d      	b.n	8001a6a <HAL_RCC_OscConfig+0x36e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x334>
 8001a16:	4b6a      	ldr	r3, [pc, #424]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	4a69      	ldr	r2, [pc, #420]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	6213      	str	r3, [r2, #32]
 8001a22:	4b67      	ldr	r3, [pc, #412]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	4a66      	ldr	r2, [pc, #408]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	f023 0304 	bic.w	r3, r3, #4
 8001a2c:	6213      	str	r3, [r2, #32]
 8001a2e:	e01c      	b.n	8001a6a <HAL_RCC_OscConfig+0x36e>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2b05      	cmp	r3, #5
 8001a36:	d10c      	bne.n	8001a52 <HAL_RCC_OscConfig+0x356>
 8001a38:	4b61      	ldr	r3, [pc, #388]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	4a60      	ldr	r2, [pc, #384]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a3e:	f043 0304 	orr.w	r3, r3, #4
 8001a42:	6213      	str	r3, [r2, #32]
 8001a44:	4b5e      	ldr	r3, [pc, #376]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	4a5d      	ldr	r2, [pc, #372]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6213      	str	r3, [r2, #32]
 8001a50:	e00b      	b.n	8001a6a <HAL_RCC_OscConfig+0x36e>
 8001a52:	4b5b      	ldr	r3, [pc, #364]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	4a5a      	ldr	r2, [pc, #360]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	6213      	str	r3, [r2, #32]
 8001a5e:	4b58      	ldr	r3, [pc, #352]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4a57      	ldr	r2, [pc, #348]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	f023 0304 	bic.w	r3, r3, #4
 8001a68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d015      	beq.n	8001a9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a72:	f7ff fb67 	bl	8001144 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a78:	e00a      	b.n	8001a90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7a:	f7ff fb63 	bl	8001144 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e0b1      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a90:	4b4b      	ldr	r3, [pc, #300]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0ee      	beq.n	8001a7a <HAL_RCC_OscConfig+0x37e>
 8001a9c:	e014      	b.n	8001ac8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9e:	f7ff fb51 	bl	8001144 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa4:	e00a      	b.n	8001abc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa6:	f7ff fb4d 	bl	8001144 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e09b      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001abc:	4b40      	ldr	r3, [pc, #256]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1ee      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ac8:	7dfb      	ldrb	r3, [r7, #23]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d105      	bne.n	8001ada <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ace:	4b3c      	ldr	r3, [pc, #240]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	4a3b      	ldr	r2, [pc, #236]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 8087 	beq.w	8001bf2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae4:	4b36      	ldr	r3, [pc, #216]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 030c 	and.w	r3, r3, #12
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d061      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d146      	bne.n	8001b86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af8:	4b33      	ldr	r3, [pc, #204]	; (8001bc8 <HAL_RCC_OscConfig+0x4cc>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afe:	f7ff fb21 	bl	8001144 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b06:	f7ff fb1d 	bl	8001144 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e06d      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b18:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f0      	bne.n	8001b06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2c:	d108      	bne.n	8001b40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b2e:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	4921      	ldr	r1, [pc, #132]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b40:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a19      	ldr	r1, [r3, #32]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	430b      	orrs	r3, r1
 8001b52:	491b      	ldr	r1, [pc, #108]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b58:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <HAL_RCC_OscConfig+0x4cc>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5e:	f7ff faf1 	bl	8001144 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b66:	f7ff faed 	bl	8001144 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e03d      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x46a>
 8001b84:	e035      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <HAL_RCC_OscConfig+0x4cc>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7ff fada 	bl	8001144 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b94:	f7ff fad6 	bl	8001144 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e026      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x498>
 8001bb2:	e01e      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d107      	bne.n	8001bcc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e019      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40007000 	.word	0x40007000
 8001bc8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_RCC_OscConfig+0x500>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d106      	bne.n	8001bee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d001      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40021000 	.word	0x40021000

08001c00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0d0      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c14:	4b6a      	ldr	r3, [pc, #424]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d910      	bls.n	8001c44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c22:	4b67      	ldr	r3, [pc, #412]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f023 0207 	bic.w	r2, r3, #7
 8001c2a:	4965      	ldr	r1, [pc, #404]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c32:	4b63      	ldr	r3, [pc, #396]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0b8      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d020      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c5c:	4b59      	ldr	r3, [pc, #356]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	4a58      	ldr	r2, [pc, #352]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c74:	4b53      	ldr	r3, [pc, #332]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4a52      	ldr	r2, [pc, #328]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c80:	4b50      	ldr	r3, [pc, #320]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	494d      	ldr	r1, [pc, #308]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d040      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d107      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca6:	4b47      	ldr	r3, [pc, #284]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d115      	bne.n	8001cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e07f      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cbe:	4b41      	ldr	r3, [pc, #260]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e073      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cce:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e06b      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cde:	4b39      	ldr	r3, [pc, #228]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f023 0203 	bic.w	r2, r3, #3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4936      	ldr	r1, [pc, #216]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cf0:	f7ff fa28 	bl	8001144 <HAL_GetTick>
 8001cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf8:	f7ff fa24 	bl	8001144 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e053      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0e:	4b2d      	ldr	r3, [pc, #180]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 020c 	and.w	r2, r3, #12
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d1eb      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d20:	4b27      	ldr	r3, [pc, #156]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d210      	bcs.n	8001d50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2e:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 0207 	bic.w	r2, r3, #7
 8001d36:	4922      	ldr	r1, [pc, #136]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e032      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d008      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d5c:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	4916      	ldr	r1, [pc, #88]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d009      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	490e      	ldr	r1, [pc, #56]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d8e:	f000 f821 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 8001d92:	4602      	mov	r2, r0
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	490a      	ldr	r1, [pc, #40]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001da0:	5ccb      	ldrb	r3, [r1, r3]
 8001da2:	fa22 f303 	lsr.w	r3, r2, r3
 8001da6:	4a09      	ldr	r2, [pc, #36]	; (8001dcc <HAL_RCC_ClockConfig+0x1cc>)
 8001da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_RCC_ClockConfig+0x1d0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff f986 	bl	80010c0 <HAL_InitTick>

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40022000 	.word	0x40022000
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	08002714 	.word	0x08002714
 8001dcc:	20000038 	.word	0x20000038
 8001dd0:	2000003c 	.word	0x2000003c

08001dd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd4:	b490      	push	{r4, r7}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001dda:	4b29      	ldr	r3, [pc, #164]	; (8001e80 <HAL_RCC_GetSysClockFreq+0xac>)
 8001ddc:	1d3c      	adds	r4, r7, #4
 8001dde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001de0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001de4:	f240 2301 	movw	r3, #513	; 0x201
 8001de8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	2300      	movs	r3, #0
 8001df0:	61bb      	str	r3, [r7, #24]
 8001df2:	2300      	movs	r3, #0
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dfe:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d002      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0x40>
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d003      	beq.n	8001e1a <HAL_RCC_GetSysClockFreq+0x46>
 8001e12:	e02b      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e14:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e16:	623b      	str	r3, [r7, #32]
      break;
 8001e18:	e02b      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	0c9b      	lsrs	r3, r3, #18
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	3328      	adds	r3, #40	; 0x28
 8001e24:	443b      	add	r3, r7
 8001e26:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e2a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d012      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e36:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	0c5b      	lsrs	r3, r3, #17
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	3328      	adds	r3, #40	; 0x28
 8001e42:	443b      	add	r3, r7
 8001e44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	4a0e      	ldr	r2, [pc, #56]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e4e:	fb03 f202 	mul.w	r2, r3, r2
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5a:	e004      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	4a0b      	ldr	r2, [pc, #44]	; (8001e8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e60:	fb02 f303 	mul.w	r3, r2, r3
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	623b      	str	r3, [r7, #32]
      break;
 8001e6a:	e002      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e6e:	623b      	str	r3, [r7, #32]
      break;
 8001e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e72:	6a3b      	ldr	r3, [r7, #32]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3728      	adds	r7, #40	; 0x28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc90      	pop	{r4, r7}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	08002704 	.word	0x08002704
 8001e84:	40021000 	.word	0x40021000
 8001e88:	007a1200 	.word	0x007a1200
 8001e8c:	003d0900 	.word	0x003d0900

08001e90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e98:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <RCC_Delay+0x34>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <RCC_Delay+0x38>)
 8001e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea2:	0a5b      	lsrs	r3, r3, #9
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	fb02 f303 	mul.w	r3, r2, r3
 8001eaa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001eac:	bf00      	nop
  }
  while (Delay --);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	1e5a      	subs	r2, r3, #1
 8001eb2:	60fa      	str	r2, [r7, #12]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f9      	bne.n	8001eac <RCC_Delay+0x1c>
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	20000038 	.word	0x20000038
 8001ec8:	10624dd3 	.word	0x10624dd3

08001ecc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e041      	b.n	8001f62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff f83a 	bl	8000f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2202      	movs	r2, #2
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3304      	adds	r3, #4
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	f000 fa6a 	bl	80023e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d001      	beq.n	8001f84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e035      	b.n	8001ff0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0201 	orr.w	r2, r2, #1
 8001f9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a16      	ldr	r2, [pc, #88]	; (8001ffc <HAL_TIM_Base_Start_IT+0x90>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d009      	beq.n	8001fba <HAL_TIM_Base_Start_IT+0x4e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fae:	d004      	beq.n	8001fba <HAL_TIM_Base_Start_IT+0x4e>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a12      	ldr	r2, [pc, #72]	; (8002000 <HAL_TIM_Base_Start_IT+0x94>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d111      	bne.n	8001fde <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2b06      	cmp	r3, #6
 8001fca:	d010      	beq.n	8001fee <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fdc:	e007      	b.n	8001fee <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0201 	orr.w	r2, r2, #1
 8001fec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40012c00 	.word	0x40012c00
 8002000:	40000400 	.word	0x40000400

08002004 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b02      	cmp	r3, #2
 8002018:	d122      	bne.n	8002060 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b02      	cmp	r3, #2
 8002026:	d11b      	bne.n	8002060 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0202 	mvn.w	r2, #2
 8002030:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f9b1 	bl	80023ae <HAL_TIM_IC_CaptureCallback>
 800204c:	e005      	b.n	800205a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f9a4 	bl	800239c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f9b3 	bl	80023c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b04      	cmp	r3, #4
 800206c:	d122      	bne.n	80020b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b04      	cmp	r3, #4
 800207a:	d11b      	bne.n	80020b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0204 	mvn.w	r2, #4
 8002084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2202      	movs	r2, #2
 800208a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f987 	bl	80023ae <HAL_TIM_IC_CaptureCallback>
 80020a0:	e005      	b.n	80020ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f97a 	bl	800239c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f989 	bl	80023c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d122      	bne.n	8002108 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d11b      	bne.n	8002108 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f06f 0208 	mvn.w	r2, #8
 80020d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2204      	movs	r2, #4
 80020de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f95d 	bl	80023ae <HAL_TIM_IC_CaptureCallback>
 80020f4:	e005      	b.n	8002102 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f950 	bl	800239c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f95f 	bl	80023c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	2b10      	cmp	r3, #16
 8002114:	d122      	bne.n	800215c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0310 	and.w	r3, r3, #16
 8002120:	2b10      	cmp	r3, #16
 8002122:	d11b      	bne.n	800215c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0210 	mvn.w	r2, #16
 800212c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2208      	movs	r2, #8
 8002132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f933 	bl	80023ae <HAL_TIM_IC_CaptureCallback>
 8002148:	e005      	b.n	8002156 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f926 	bl	800239c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f935 	bl	80023c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b01      	cmp	r3, #1
 8002168:	d10e      	bne.n	8002188 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b01      	cmp	r3, #1
 8002176:	d107      	bne.n	8002188 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f06f 0201 	mvn.w	r2, #1
 8002180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7fe ff4e 	bl	8001024 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002192:	2b80      	cmp	r3, #128	; 0x80
 8002194:	d10e      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a0:	2b80      	cmp	r3, #128	; 0x80
 80021a2:	d107      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 fa67 	bl	8002682 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021be:	2b40      	cmp	r3, #64	; 0x40
 80021c0:	d10e      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021cc:	2b40      	cmp	r3, #64	; 0x40
 80021ce:	d107      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f8f9 	bl	80023d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0320 	and.w	r3, r3, #32
 80021ea:	2b20      	cmp	r3, #32
 80021ec:	d10e      	bne.n	800220c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0320 	and.w	r3, r3, #32
 80021f8:	2b20      	cmp	r3, #32
 80021fa:	d107      	bne.n	800220c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0220 	mvn.w	r2, #32
 8002204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fa32 	bl	8002670 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_TIM_ConfigClockSource+0x18>
 8002228:	2302      	movs	r3, #2
 800222a:	e0b3      	b.n	8002394 <HAL_TIM_ConfigClockSource+0x180>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2202      	movs	r2, #2
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800224a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002252:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002264:	d03e      	beq.n	80022e4 <HAL_TIM_ConfigClockSource+0xd0>
 8002266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800226a:	f200 8087 	bhi.w	800237c <HAL_TIM_ConfigClockSource+0x168>
 800226e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002272:	f000 8085 	beq.w	8002380 <HAL_TIM_ConfigClockSource+0x16c>
 8002276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800227a:	d87f      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x168>
 800227c:	2b70      	cmp	r3, #112	; 0x70
 800227e:	d01a      	beq.n	80022b6 <HAL_TIM_ConfigClockSource+0xa2>
 8002280:	2b70      	cmp	r3, #112	; 0x70
 8002282:	d87b      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x168>
 8002284:	2b60      	cmp	r3, #96	; 0x60
 8002286:	d050      	beq.n	800232a <HAL_TIM_ConfigClockSource+0x116>
 8002288:	2b60      	cmp	r3, #96	; 0x60
 800228a:	d877      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x168>
 800228c:	2b50      	cmp	r3, #80	; 0x50
 800228e:	d03c      	beq.n	800230a <HAL_TIM_ConfigClockSource+0xf6>
 8002290:	2b50      	cmp	r3, #80	; 0x50
 8002292:	d873      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x168>
 8002294:	2b40      	cmp	r3, #64	; 0x40
 8002296:	d058      	beq.n	800234a <HAL_TIM_ConfigClockSource+0x136>
 8002298:	2b40      	cmp	r3, #64	; 0x40
 800229a:	d86f      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x168>
 800229c:	2b30      	cmp	r3, #48	; 0x30
 800229e:	d064      	beq.n	800236a <HAL_TIM_ConfigClockSource+0x156>
 80022a0:	2b30      	cmp	r3, #48	; 0x30
 80022a2:	d86b      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x168>
 80022a4:	2b20      	cmp	r3, #32
 80022a6:	d060      	beq.n	800236a <HAL_TIM_ConfigClockSource+0x156>
 80022a8:	2b20      	cmp	r3, #32
 80022aa:	d867      	bhi.n	800237c <HAL_TIM_ConfigClockSource+0x168>
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d05c      	beq.n	800236a <HAL_TIM_ConfigClockSource+0x156>
 80022b0:	2b10      	cmp	r3, #16
 80022b2:	d05a      	beq.n	800236a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80022b4:	e062      	b.n	800237c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	6899      	ldr	r1, [r3, #8]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f000 f95c 	bl	8002582 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80022d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	609a      	str	r2, [r3, #8]
      break;
 80022e2:	e04e      	b.n	8002382 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	6899      	ldr	r1, [r3, #8]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f000 f945 	bl	8002582 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002306:	609a      	str	r2, [r3, #8]
      break;
 8002308:	e03b      	b.n	8002382 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	6859      	ldr	r1, [r3, #4]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	461a      	mov	r2, r3
 8002318:	f000 f8bc 	bl	8002494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2150      	movs	r1, #80	; 0x50
 8002322:	4618      	mov	r0, r3
 8002324:	f000 f913 	bl	800254e <TIM_ITRx_SetConfig>
      break;
 8002328:	e02b      	b.n	8002382 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6859      	ldr	r1, [r3, #4]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	461a      	mov	r2, r3
 8002338:	f000 f8da 	bl	80024f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2160      	movs	r1, #96	; 0x60
 8002342:	4618      	mov	r0, r3
 8002344:	f000 f903 	bl	800254e <TIM_ITRx_SetConfig>
      break;
 8002348:	e01b      	b.n	8002382 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	6859      	ldr	r1, [r3, #4]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	461a      	mov	r2, r3
 8002358:	f000 f89c 	bl	8002494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2140      	movs	r1, #64	; 0x40
 8002362:	4618      	mov	r0, r3
 8002364:	f000 f8f3 	bl	800254e <TIM_ITRx_SetConfig>
      break;
 8002368:	e00b      	b.n	8002382 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4619      	mov	r1, r3
 8002374:	4610      	mov	r0, r2
 8002376:	f000 f8ea 	bl	800254e <TIM_ITRx_SetConfig>
        break;
 800237a:	e002      	b.n	8002382 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800237c:	bf00      	nop
 800237e:	e000      	b.n	8002382 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002380:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr

080023ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr

080023d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a25      	ldr	r2, [pc, #148]	; (800248c <TIM_Base_SetConfig+0xa8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d007      	beq.n	800240c <TIM_Base_SetConfig+0x28>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002402:	d003      	beq.n	800240c <TIM_Base_SetConfig+0x28>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a22      	ldr	r2, [pc, #136]	; (8002490 <TIM_Base_SetConfig+0xac>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d108      	bne.n	800241e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4313      	orrs	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a1a      	ldr	r2, [pc, #104]	; (800248c <TIM_Base_SetConfig+0xa8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d007      	beq.n	8002436 <TIM_Base_SetConfig+0x52>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800242c:	d003      	beq.n	8002436 <TIM_Base_SetConfig+0x52>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a17      	ldr	r2, [pc, #92]	; (8002490 <TIM_Base_SetConfig+0xac>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d108      	bne.n	8002448 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800243c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	4313      	orrs	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	4313      	orrs	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a07      	ldr	r2, [pc, #28]	; (800248c <TIM_Base_SetConfig+0xa8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d103      	bne.n	800247c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	615a      	str	r2, [r3, #20]
}
 8002482:	bf00      	nop
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr
 800248c:	40012c00 	.word	0x40012c00
 8002490:	40000400 	.word	0x40000400

08002494 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	f023 0201 	bic.w	r2, r3, #1
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f023 030a 	bic.w	r3, r3, #10
 80024d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	621a      	str	r2, [r3, #32]
}
 80024e6:	bf00      	nop
 80024e8:	371c      	adds	r7, #28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	f023 0210 	bic.w	r2, r3, #16
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800251a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	031b      	lsls	r3, r3, #12
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	4313      	orrs	r3, r2
 8002524:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800252c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	621a      	str	r2, [r3, #32]
}
 8002544:	bf00      	nop
 8002546:	371c      	adds	r7, #28
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr

0800254e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800254e:	b480      	push	{r7}
 8002550:	b085      	sub	sp, #20
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002564:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	f043 0307 	orr.w	r3, r3, #7
 8002570:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	609a      	str	r2, [r3, #8]
}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr

08002582 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002582:	b480      	push	{r7}
 8002584:	b087      	sub	sp, #28
 8002586:	af00      	add	r7, sp, #0
 8002588:	60f8      	str	r0, [r7, #12]
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	607a      	str	r2, [r7, #4]
 800258e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800259c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	021a      	lsls	r2, r3, #8
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	431a      	orrs	r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	609a      	str	r2, [r3, #8]
}
 80025b6:	bf00      	nop
 80025b8:	371c      	adds	r7, #28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e041      	b.n	800265c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a14      	ldr	r2, [pc, #80]	; (8002668 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d009      	beq.n	8002630 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002624:	d004      	beq.n	8002630 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a10      	ldr	r2, [pc, #64]	; (800266c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d10c      	bne.n	800264a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002636:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	4313      	orrs	r3, r2
 8002640:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40012c00 	.word	0x40012c00
 800266c:	40000400 	.word	0x40000400

08002670 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr

08002682 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <__libc_init_array>:
 8002694:	b570      	push	{r4, r5, r6, lr}
 8002696:	2600      	movs	r6, #0
 8002698:	4d0c      	ldr	r5, [pc, #48]	; (80026cc <__libc_init_array+0x38>)
 800269a:	4c0d      	ldr	r4, [pc, #52]	; (80026d0 <__libc_init_array+0x3c>)
 800269c:	1b64      	subs	r4, r4, r5
 800269e:	10a4      	asrs	r4, r4, #2
 80026a0:	42a6      	cmp	r6, r4
 80026a2:	d109      	bne.n	80026b8 <__libc_init_array+0x24>
 80026a4:	f000 f822 	bl	80026ec <_init>
 80026a8:	2600      	movs	r6, #0
 80026aa:	4d0a      	ldr	r5, [pc, #40]	; (80026d4 <__libc_init_array+0x40>)
 80026ac:	4c0a      	ldr	r4, [pc, #40]	; (80026d8 <__libc_init_array+0x44>)
 80026ae:	1b64      	subs	r4, r4, r5
 80026b0:	10a4      	asrs	r4, r4, #2
 80026b2:	42a6      	cmp	r6, r4
 80026b4:	d105      	bne.n	80026c2 <__libc_init_array+0x2e>
 80026b6:	bd70      	pop	{r4, r5, r6, pc}
 80026b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80026bc:	4798      	blx	r3
 80026be:	3601      	adds	r6, #1
 80026c0:	e7ee      	b.n	80026a0 <__libc_init_array+0xc>
 80026c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c6:	4798      	blx	r3
 80026c8:	3601      	adds	r6, #1
 80026ca:	e7f2      	b.n	80026b2 <__libc_init_array+0x1e>
 80026cc:	08002724 	.word	0x08002724
 80026d0:	08002724 	.word	0x08002724
 80026d4:	08002724 	.word	0x08002724
 80026d8:	08002728 	.word	0x08002728

080026dc <memset>:
 80026dc:	4603      	mov	r3, r0
 80026de:	4402      	add	r2, r0
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d100      	bne.n	80026e6 <memset+0xa>
 80026e4:	4770      	bx	lr
 80026e6:	f803 1b01 	strb.w	r1, [r3], #1
 80026ea:	e7f9      	b.n	80026e0 <memset+0x4>

080026ec <_init>:
 80026ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ee:	bf00      	nop
 80026f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026f2:	bc08      	pop	{r3}
 80026f4:	469e      	mov	lr, r3
 80026f6:	4770      	bx	lr

080026f8 <_fini>:
 80026f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026fa:	bf00      	nop
 80026fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026fe:	bc08      	pop	{r3}
 8002700:	469e      	mov	lr, r3
 8002702:	4770      	bx	lr
